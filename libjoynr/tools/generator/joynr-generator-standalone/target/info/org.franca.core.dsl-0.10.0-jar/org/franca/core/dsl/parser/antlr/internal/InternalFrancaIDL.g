/*
* generated by Xtext
*/
grammar InternalFrancaIDL;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.franca.core.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.franca.core.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.franca.core.dsl.services.FrancaIDLGrammarAccess;

}

@parser::members {

 	private FrancaIDLGrammarAccess grammarAccess;
 	
    public InternalFrancaIDLParser(TokenStream input, FrancaIDLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "FModel";	
   	}
   	
   	@Override
   	protected FrancaIDLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFModel
entryRuleFModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFModelRule()); }
	 iv_ruleFModel=ruleFModel 
	 { $current=$iv_ruleFModel.current; } 
	 EOF 
;

// Rule FModel
ruleFModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFModelAccess().getFModelAction_0(),
            $current);
    }
)	otherlv_1='package' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFModelAccess().getPackageKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFModelAccess().getNameFQNParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFModelRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFModelAccess().getImportsImportParserRuleCall_3_0()); 
	    }
		lv_imports_3_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_3_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getFModelAccess().getTypeCollectionsFTypeCollectionParserRuleCall_4_0_0()); 
	    }
		lv_typeCollections_4_0=ruleFTypeCollection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFModelRule());
	        }
       		add(
       			$current, 
       			"typeCollections",
        		lv_typeCollections_4_0, 
        		"FTypeCollection");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFModelAccess().getInterfacesFInterfaceParserRuleCall_4_1_0()); 
	    }
		lv_interfaces_5_0=ruleFInterface		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFModelRule());
	        }
       		add(
       			$current, 
       			"interfaces",
        		lv_interfaces_5_0, 
        		"FInterface");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleFTypeCollection
entryRuleFTypeCollection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFTypeCollectionRule()); }
	 iv_ruleFTypeCollection=ruleFTypeCollection 
	 { $current=$iv_ruleFTypeCollection.current; } 
	 EOF 
;

// Rule FTypeCollection
ruleFTypeCollection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFTypeCollectionAccess().getFTypeCollectionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFTypeCollectionAccess().getCommentFAnnotationBlockParserRuleCall_1_0()); 
	    }
		lv_comment_1_0=ruleFAnnotationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFTypeCollectionRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_1_0, 
        		"FAnnotationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='typeCollection' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFTypeCollectionAccess().getTypeCollectionKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getFTypeCollectionAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFTypeCollectionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFTypeCollectionAccess().getLeftCurlyBracketKeyword_4());
    }
(	otherlv_5='version' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFTypeCollectionAccess().getVersionKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFTypeCollectionAccess().getVersionFVersionParserRuleCall_5_1_0()); 
	    }
		lv_version_6_0=ruleFVersion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFTypeCollectionRule());
	        }
       		set(
       			$current, 
       			"version",
        		lv_version_6_0, 
        		"FVersion");
	        afterParserOrEnumRuleCall();
	    }

)
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getFTypeCollectionAccess().getConstantsFConstantDefParserRuleCall_6_0_0()); 
	    }
		lv_constants_7_0=ruleFConstantDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFTypeCollectionRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_7_0, 
        		"FConstantDef");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFTypeCollectionAccess().getTypesFTypeParserRuleCall_6_1_0()); 
	    }
		lv_types_8_0=ruleFType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFTypeCollectionRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_8_0, 
        		"FType");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFTypeCollectionAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleFInterface
entryRuleFInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFInterfaceRule()); }
	 iv_ruleFInterface=ruleFInterface 
	 { $current=$iv_ruleFInterface.current; } 
	 EOF 
;

// Rule FInterface
ruleFInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFInterfaceAccess().getFInterfaceAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFInterfaceAccess().getCommentFAnnotationBlockParserRuleCall_1_0()); 
	    }
		lv_comment_1_0=ruleFAnnotationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFInterfaceRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_1_0, 
        		"FAnnotationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='interface' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFInterfaceAccess().getInterfaceKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getFInterfaceAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(	otherlv_4='extends' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFInterfaceAccess().getExtendsKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFInterfaceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFInterfaceAccess().getBaseFInterfaceCrossReference_4_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='manages' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFInterfaceAccess().getManagesKeyword_5_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFInterfaceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFInterfaceAccess().getManagedInterfacesFInterfaceCrossReference_5_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFInterfaceAccess().getCommaKeyword_5_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFInterfaceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFInterfaceAccess().getManagedInterfacesFInterfaceCrossReference_5_2_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_10='{' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFInterfaceAccess().getLeftCurlyBracketKeyword_6());
    }
(	otherlv_11='version' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFInterfaceAccess().getVersionKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFInterfaceAccess().getVersionFVersionParserRuleCall_7_1_0()); 
	    }
		lv_version_12_0=ruleFVersion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFInterfaceRule());
	        }
       		set(
       			$current, 
       			"version",
        		lv_version_12_0, 
        		"FVersion");
	        afterParserOrEnumRuleCall();
	    }

)
))?((
(
		{ 
	        newCompositeNode(grammarAccess.getFInterfaceAccess().getAttributesFAttributeParserRuleCall_8_0_0()); 
	    }
		lv_attributes_13_0=ruleFAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFInterfaceRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_13_0, 
        		"FAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFInterfaceAccess().getMethodsFMethodParserRuleCall_8_1_0()); 
	    }
		lv_methods_14_0=ruleFMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFInterfaceRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_14_0, 
        		"FMethod");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFInterfaceAccess().getBroadcastsFBroadcastParserRuleCall_8_2_0()); 
	    }
		lv_broadcasts_15_0=ruleFBroadcast		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFInterfaceRule());
	        }
       		add(
       			$current, 
       			"broadcasts",
        		lv_broadcasts_15_0, 
        		"FBroadcast");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFInterfaceAccess().getConstantsFConstantDefParserRuleCall_8_3_0()); 
	    }
		lv_constants_16_0=ruleFConstantDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFInterfaceRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_16_0, 
        		"FConstantDef");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFInterfaceAccess().getTypesFTypeParserRuleCall_8_4_0()); 
	    }
		lv_types_17_0=ruleFType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFInterfaceRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_17_0, 
        		"FType");
	        afterParserOrEnumRuleCall();
	    }

)
))*((
(
		{ 
	        newCompositeNode(grammarAccess.getFInterfaceAccess().getContractFContractParserRuleCall_9_0_0()); 
	    }
		lv_contract_18_0=ruleFContract		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFInterfaceRule());
	        }
       		set(
       			$current, 
       			"contract",
        		lv_contract_18_0, 
        		"FContract");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFInterfaceAccess().getConstantsFConstantDefParserRuleCall_9_1_0_0()); 
	    }
		lv_constants_19_0=ruleFConstantDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFInterfaceRule());
	        }
       		add(
       			$current, 
       			"constants",
        		lv_constants_19_0, 
        		"FConstantDef");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFInterfaceAccess().getTypesFTypeParserRuleCall_9_1_1_0()); 
	    }
		lv_types_20_0=ruleFType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFInterfaceRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_20_0, 
        		"FType");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_21='}' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getFInterfaceAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleFVersion
entryRuleFVersion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFVersionRule()); }
	 iv_ruleFVersion=ruleFVersion 
	 { $current=$iv_ruleFVersion.current; } 
	 EOF 
;

// Rule FVersion
ruleFVersion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFVersionAccess().getFVersionAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFVersionAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='major' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFVersionAccess().getMajorKeyword_2());
    }
(
(
		lv_major_3_0=RULE_INT
		{
			newLeafNode(lv_major_3_0, grammarAccess.getFVersionAccess().getMajorINTTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFVersionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"major",
        		lv_major_3_0, 
        		"INT");
	    }

)
)	otherlv_4='minor' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFVersionAccess().getMinorKeyword_4());
    }
(
(
		lv_minor_5_0=RULE_INT
		{
			newLeafNode(lv_minor_5_0, grammarAccess.getFVersionAccess().getMinorINTTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFVersionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"minor",
        		lv_minor_5_0, 
        		"INT");
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFVersionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleFAttribute
entryRuleFAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFAttributeRule()); }
	 iv_ruleFAttribute=ruleFAttribute 
	 { $current=$iv_ruleFAttribute.current; } 
	 EOF 
;

// Rule FAttribute
ruleFAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFAttributeAccess().getCommentFAnnotationBlockParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleFAnnotationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFAttributeRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"FAnnotationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='attribute' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFAttributeAccess().getAttributeKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFAttributeAccess().getTypeFTypeRefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleFTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFAttributeRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"FTypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_array_3_0=	'[' 
    {
        newLeafNode(lv_array_3_0, grammarAccess.getFAttributeAccess().getArrayLeftSquareBracketKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFAttributeRule());
	        }
       		setWithLastConsumed($current, "array", true, "[");
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFAttributeAccess().getRightSquareBracketKeyword_3_1());
    }
)?(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getFAttributeAccess().getNameIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ID");
	    }

)
)(
(
		lv_readonly_6_0=	'readonly' 
    {
        newLeafNode(lv_readonly_6_0, grammarAccess.getFAttributeAccess().getReadonlyReadonlyKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFAttributeRule());
	        }
       		setWithLastConsumed($current, "readonly", true, "readonly");
	    }

)
)?(
(
		lv_noSubscriptions_7_0=	'noSubscriptions' 
    {
        newLeafNode(lv_noSubscriptions_7_0, grammarAccess.getFAttributeAccess().getNoSubscriptionsNoSubscriptionsKeyword_6_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFAttributeRule());
	        }
       		setWithLastConsumed($current, "noSubscriptions", true, "noSubscriptions");
	    }

)
)?)
;





// Entry rule entryRuleFMethod
entryRuleFMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFMethodRule()); }
	 iv_ruleFMethod=ruleFMethod 
	 { $current=$iv_ruleFMethod.current; } 
	 EOF 
;

// Rule FMethod
ruleFMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFMethodAccess().getFMethodAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFMethodAccess().getCommentFAnnotationBlockParserRuleCall_1_0()); 
	    }
		lv_comment_1_0=ruleFAnnotationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFMethodRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_1_0, 
        		"FAnnotationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='method' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFMethodAccess().getMethodKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getFMethodAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFMethodAccess().getColonKeyword_4_0());
    }
(
(
		lv_selector_5_0=RULE_ID
		{
			newLeafNode(lv_selector_5_0, grammarAccess.getFMethodAccess().getSelectorIDTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"selector",
        		lv_selector_5_0, 
        		"ID");
	    }

)
))?(
(
		lv_fireAndForget_6_0=	'fireAndForget' 
    {
        newLeafNode(lv_fireAndForget_6_0, grammarAccess.getFMethodAccess().getFireAndForgetFireAndForgetKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFMethodRule());
	        }
       		setWithLastConsumed($current, "fireAndForget", true, "fireAndForget");
	    }

)
)?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFMethodAccess().getLeftCurlyBracketKeyword_6());
    }
(	otherlv_8='in' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFMethodAccess().getInKeyword_7_0());
    }
	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFMethodAccess().getLeftCurlyBracketKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFMethodAccess().getInArgsFArgumentParserRuleCall_7_2_0()); 
	    }
		lv_inArgs_10_0=ruleFArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFMethodRule());
	        }
       		add(
       			$current, 
       			"inArgs",
        		lv_inArgs_10_0, 
        		"FArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFMethodAccess().getRightCurlyBracketKeyword_7_3());
    }
)?(	otherlv_12='out' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getFMethodAccess().getOutKeyword_8_0());
    }
	otherlv_13='{' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getFMethodAccess().getLeftCurlyBracketKeyword_8_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFMethodAccess().getOutArgsFArgumentParserRuleCall_8_2_0()); 
	    }
		lv_outArgs_14_0=ruleFArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFMethodRule());
	        }
       		add(
       			$current, 
       			"outArgs",
        		lv_outArgs_14_0, 
        		"FArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getFMethodAccess().getRightCurlyBracketKeyword_8_3());
    }
)?(	otherlv_16='error' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getFMethodAccess().getErrorKeyword_9_0());
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFMethodRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFMethodAccess().getErrorEnumFEnumerationTypeCrossReference_9_1_0_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFMethodAccess().getErrorsFEnumerationTypeBodyParserRuleCall_9_1_1_0()); 
	    }
		lv_errors_18_0=ruleFEnumerationTypeBody		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFMethodRule());
	        }
       		set(
       			$current, 
       			"errors",
        		lv_errors_18_0, 
        		"FEnumerationTypeBody");
	        afterParserOrEnumRuleCall();
	    }

)
)))?	otherlv_19='}' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getFMethodAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleFBroadcast
entryRuleFBroadcast returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFBroadcastRule()); }
	 iv_ruleFBroadcast=ruleFBroadcast 
	 { $current=$iv_ruleFBroadcast.current; } 
	 EOF 
;

// Rule FBroadcast
ruleFBroadcast returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFBroadcastAccess().getFBroadcastAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFBroadcastAccess().getCommentFAnnotationBlockParserRuleCall_1_0()); 
	    }
		lv_comment_1_0=ruleFAnnotationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFBroadcastRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_1_0, 
        		"FAnnotationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='broadcast' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFBroadcastAccess().getBroadcastKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getFBroadcastAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFBroadcastRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFBroadcastAccess().getColonKeyword_4_0());
    }
(
(
		lv_selector_5_0=RULE_ID
		{
			newLeafNode(lv_selector_5_0, grammarAccess.getFBroadcastAccess().getSelectorIDTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFBroadcastRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"selector",
        		lv_selector_5_0, 
        		"ID");
	    }

)
))?(
(
		lv_selective_6_0=	'selective' 
    {
        newLeafNode(lv_selective_6_0, grammarAccess.getFBroadcastAccess().getSelectiveSelectiveKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFBroadcastRule());
	        }
       		setWithLastConsumed($current, "selective", true, "selective");
	    }

)
)?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFBroadcastAccess().getLeftCurlyBracketKeyword_6());
    }
(	otherlv_8='out' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFBroadcastAccess().getOutKeyword_7_0());
    }
	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFBroadcastAccess().getLeftCurlyBracketKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFBroadcastAccess().getOutArgsFArgumentParserRuleCall_7_2_0()); 
	    }
		lv_outArgs_10_0=ruleFArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFBroadcastRule());
	        }
       		add(
       			$current, 
       			"outArgs",
        		lv_outArgs_10_0, 
        		"FArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFBroadcastAccess().getRightCurlyBracketKeyword_7_3());
    }
)?	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getFBroadcastAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleFArgument
entryRuleFArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFArgumentRule()); }
	 iv_ruleFArgument=ruleFArgument 
	 { $current=$iv_ruleFArgument.current; } 
	 EOF 
;

// Rule FArgument
ruleFArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFArgumentAccess().getCommentFAnnotationBlockParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleFAnnotationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFArgumentRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"FAnnotationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFArgumentAccess().getTypeFTypeRefParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleFTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFArgumentRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"FTypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_array_2_0=	'[' 
    {
        newLeafNode(lv_array_2_0, grammarAccess.getFArgumentAccess().getArrayLeftSquareBracketKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFArgumentRule());
	        }
       		setWithLastConsumed($current, "array", true, "[");
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFArgumentAccess().getRightSquareBracketKeyword_2_1());
    }
)?(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getFArgumentAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFArgumentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleFTypeRef
entryRuleFTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFTypeRefRule()); }
	 iv_ruleFTypeRef=ruleFTypeRef 
	 { $current=$iv_ruleFTypeRef.current; } 
	 EOF 
;

// Rule FTypeRef
ruleFTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFTypeRefAccess().getPredefinedFBasicTypeIdEnumRuleCall_0_0()); 
	    }
		lv_predefined_0_0=ruleFBasicTypeId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFTypeRefRule());
	        }
       		set(
       			$current, 
       			"predefined",
        		lv_predefined_0_0, 
        		"FBasicTypeId");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFTypeRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFTypeRefAccess().getDerivedFTypeCrossReference_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFTypeRefAccess().getIntervalFIntegerIntervalParserRuleCall_2_0()); 
	    }
		lv_interval_2_0=ruleFIntegerInterval		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFTypeRefRule());
	        }
       		set(
       			$current, 
       			"interval",
        		lv_interval_2_0, 
        		"FIntegerInterval");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFIntegerInterval
entryRuleFIntegerInterval returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFIntegerIntervalRule()); }
	 iv_ruleFIntegerInterval=ruleFIntegerInterval 
	 { $current=$iv_ruleFIntegerInterval.current; } 
	 EOF 
;

// Rule FIntegerInterval
ruleFIntegerInterval returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFIntegerIntervalAccess().getFIntegerIntervalAction_0(),
            $current);
    }
)	otherlv_1='Integer' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFIntegerIntervalAccess().getIntegerKeyword_1());
    }
(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFIntegerIntervalAccess().getLeftParenthesisKeyword_2_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFIntegerIntervalAccess().getLowerBoundINTERVAL_BOUNDParserRuleCall_2_1_0_0()); 
	    }
		lv_lowerBound_3_0=ruleINTERVAL_BOUND		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFIntegerIntervalRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_3_0, 
        		"INTERVAL_BOUND");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_4='minInt' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFIntegerIntervalAccess().getMinIntKeyword_2_1_1());
    }
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFIntegerIntervalAccess().getCommaKeyword_2_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFIntegerIntervalAccess().getUpperBoundINTERVAL_BOUNDParserRuleCall_2_3_0_0()); 
	    }
		lv_upperBound_6_0=ruleINTERVAL_BOUND		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFIntegerIntervalRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_6_0, 
        		"INTERVAL_BOUND");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_7='maxInt' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFIntegerIntervalAccess().getMaxIntKeyword_2_3_1());
    }
)	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFIntegerIntervalAccess().getRightParenthesisKeyword_2_4());
    }
)?)
;





// Entry rule entryRuleINTERVAL_BOUND
entryRuleINTERVAL_BOUND returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getINTERVAL_BOUNDRule()); } 
	 iv_ruleINTERVAL_BOUND=ruleINTERVAL_BOUND 
	 { $current=$iv_ruleINTERVAL_BOUND.current.getText(); }  
	 EOF 
;

// Rule INTERVAL_BOUND
ruleINTERVAL_BOUND returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getINTERVAL_BOUNDAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getINTERVAL_BOUNDAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleFType
entryRuleFType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFTypeRule()); }
	 iv_ruleFType=ruleFType 
	 { $current=$iv_ruleFType.current; } 
	 EOF 
;

// Rule FType
ruleFType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFTypeAccess().getFArrayTypeParserRuleCall_0()); 
    }
    this_FArrayType_0=ruleFArrayType
    { 
        $current = $this_FArrayType_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFTypeAccess().getFEnumerationTypeParserRuleCall_1()); 
    }
    this_FEnumerationType_1=ruleFEnumerationType
    { 
        $current = $this_FEnumerationType_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFTypeAccess().getFStructTypeParserRuleCall_2()); 
    }
    this_FStructType_2=ruleFStructType
    { 
        $current = $this_FStructType_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFTypeAccess().getFUnionTypeParserRuleCall_3()); 
    }
    this_FUnionType_3=ruleFUnionType
    { 
        $current = $this_FUnionType_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFTypeAccess().getFMapTypeParserRuleCall_4()); 
    }
    this_FMapType_4=ruleFMapType
    { 
        $current = $this_FMapType_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFTypeAccess().getFTypeDefParserRuleCall_5()); 
    }
    this_FTypeDef_5=ruleFTypeDef
    { 
        $current = $this_FTypeDef_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFArrayType
entryRuleFArrayType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFArrayTypeRule()); }
	 iv_ruleFArrayType=ruleFArrayType 
	 { $current=$iv_ruleFArrayType.current; } 
	 EOF 
;

// Rule FArrayType
ruleFArrayType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFArrayTypeAccess().getFArrayTypeAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFArrayTypeAccess().getCommentFAnnotationBlockParserRuleCall_1_0()); 
	    }
		lv_comment_1_0=ruleFAnnotationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFArrayTypeRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_1_0, 
        		"FAnnotationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='array' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFArrayTypeAccess().getArrayKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getFArrayTypeAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFArrayTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='of' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFArrayTypeAccess().getOfKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFArrayTypeAccess().getElementTypeFTypeRefParserRuleCall_5_0()); 
	    }
		lv_elementType_5_0=ruleFTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFArrayTypeRule());
	        }
       		set(
       			$current, 
       			"elementType",
        		lv_elementType_5_0, 
        		"FTypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFTypeDef
entryRuleFTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFTypeDefRule()); }
	 iv_ruleFTypeDef=ruleFTypeDef 
	 { $current=$iv_ruleFTypeDef.current; } 
	 EOF 
;

// Rule FTypeDef
ruleFTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFTypeDefAccess().getFTypeDefAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFTypeDefAccess().getCommentFAnnotationBlockParserRuleCall_1_0()); 
	    }
		lv_comment_1_0=ruleFAnnotationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFTypeDefRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_1_0, 
        		"FAnnotationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='typedef' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFTypeDefAccess().getTypedefKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getFTypeDefAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='is' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFTypeDefAccess().getIsKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFTypeDefAccess().getActualTypeFTypeRefParserRuleCall_5_0()); 
	    }
		lv_actualType_5_0=ruleFTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFTypeDefRule());
	        }
       		set(
       			$current, 
       			"actualType",
        		lv_actualType_5_0, 
        		"FTypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFStructType
entryRuleFStructType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFStructTypeRule()); }
	 iv_ruleFStructType=ruleFStructType 
	 { $current=$iv_ruleFStructType.current; } 
	 EOF 
;

// Rule FStructType
ruleFStructType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFStructTypeAccess().getFStructTypeAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFStructTypeAccess().getCommentFAnnotationBlockParserRuleCall_1_0()); 
	    }
		lv_comment_1_0=ruleFAnnotationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFStructTypeRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_1_0, 
        		"FAnnotationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='struct' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFStructTypeAccess().getStructKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getFStructTypeAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFStructTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)((	otherlv_4='extends' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFStructTypeAccess().getExtendsKeyword_4_0_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFStructTypeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFStructTypeAccess().getBaseFStructTypeCrossReference_4_0_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_polymorphic_6_0=	'polymorphic' 
    {
        newLeafNode(lv_polymorphic_6_0, grammarAccess.getFStructTypeAccess().getPolymorphicPolymorphicKeyword_4_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFStructTypeRule());
	        }
       		setWithLastConsumed($current, "polymorphic", true, "polymorphic");
	    }

)
))?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFStructTypeAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFStructTypeAccess().getElementsFFieldParserRuleCall_6_0()); 
	    }
		lv_elements_8_0=ruleFField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFStructTypeRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_8_0, 
        		"FField");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFStructTypeAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleFUnionType
entryRuleFUnionType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFUnionTypeRule()); }
	 iv_ruleFUnionType=ruleFUnionType 
	 { $current=$iv_ruleFUnionType.current; } 
	 EOF 
;

// Rule FUnionType
ruleFUnionType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFUnionTypeAccess().getFUnionTypeAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFUnionTypeAccess().getCommentFAnnotationBlockParserRuleCall_1_0()); 
	    }
		lv_comment_1_0=ruleFAnnotationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFUnionTypeRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_1_0, 
        		"FAnnotationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='union' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFUnionTypeAccess().getUnionKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getFUnionTypeAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFUnionTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(	otherlv_4='extends' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFUnionTypeAccess().getExtendsKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFUnionTypeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFUnionTypeAccess().getBaseFUnionTypeCrossReference_4_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFUnionTypeAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFUnionTypeAccess().getElementsFFieldParserRuleCall_6_0()); 
	    }
		lv_elements_7_0=ruleFField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFUnionTypeRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_7_0, 
        		"FField");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFUnionTypeAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleFEnumerationType
entryRuleFEnumerationType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFEnumerationTypeRule()); }
	 iv_ruleFEnumerationType=ruleFEnumerationType 
	 { $current=$iv_ruleFEnumerationType.current; } 
	 EOF 
;

// Rule FEnumerationType
ruleFEnumerationType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFEnumerationTypeAccess().getFEnumerationTypeAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFEnumerationTypeAccess().getCommentFAnnotationBlockParserRuleCall_1_0()); 
	    }
		lv_comment_1_0=ruleFAnnotationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFEnumerationTypeRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_1_0, 
        		"FAnnotationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='enumeration' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFEnumerationTypeAccess().getEnumerationKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getFEnumerationTypeAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFEnumerationTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(	otherlv_4='extends' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFEnumerationTypeAccess().getExtendsKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFEnumerationTypeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFEnumerationTypeAccess().getBaseFEnumerationTypeCrossReference_4_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFEnumerationTypeAccess().getLeftCurlyBracketKeyword_5());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFEnumerationTypeAccess().getEnumeratorsFEnumeratorParserRuleCall_6_0_0()); 
	    }
		lv_enumerators_7_0=ruleFEnumerator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFEnumerationTypeRule());
	        }
       		add(
       			$current, 
       			"enumerators",
        		lv_enumerators_7_0, 
        		"FEnumerator");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFEnumerationTypeAccess().getCommaKeyword_6_1_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFEnumerationTypeAccess().getEnumeratorsFEnumeratorParserRuleCall_6_1_1_0()); 
	    }
		lv_enumerators_9_0=ruleFEnumerator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFEnumerationTypeRule());
	        }
       		add(
       			$current, 
       			"enumerators",
        		lv_enumerators_9_0, 
        		"FEnumerator");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFEnumerationTypeAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleFEnumerationTypeBody
entryRuleFEnumerationTypeBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFEnumerationTypeBodyRule()); }
	 iv_ruleFEnumerationTypeBody=ruleFEnumerationTypeBody 
	 { $current=$iv_ruleFEnumerationTypeBody.current; } 
	 EOF 
;

// Rule FEnumerationTypeBody
ruleFEnumerationTypeBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFEnumerationTypeBodyAccess().getFEnumerationTypeAction_0(),
            $current);
    }
)(	otherlv_1='extends' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFEnumerationTypeBodyAccess().getExtendsKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFEnumerationTypeBodyRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFEnumerationTypeBodyAccess().getBaseFEnumerationTypeCrossReference_1_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFEnumerationTypeBodyAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFEnumerationTypeBodyAccess().getEnumeratorsFEnumeratorParserRuleCall_3_0_0()); 
	    }
		lv_enumerators_4_0=ruleFEnumerator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFEnumerationTypeBodyRule());
	        }
       		add(
       			$current, 
       			"enumerators",
        		lv_enumerators_4_0, 
        		"FEnumerator");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFEnumerationTypeBodyAccess().getCommaKeyword_3_1_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFEnumerationTypeBodyAccess().getEnumeratorsFEnumeratorParserRuleCall_3_1_1_0()); 
	    }
		lv_enumerators_6_0=ruleFEnumerator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFEnumerationTypeBodyRule());
	        }
       		add(
       			$current, 
       			"enumerators",
        		lv_enumerators_6_0, 
        		"FEnumerator");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFEnumerationTypeBodyAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFEnumerator
entryRuleFEnumerator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFEnumeratorRule()); }
	 iv_ruleFEnumerator=ruleFEnumerator 
	 { $current=$iv_ruleFEnumerator.current; } 
	 EOF 
;

// Rule FEnumerator
ruleFEnumerator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFEnumeratorAccess().getFEnumeratorAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFEnumeratorAccess().getCommentFAnnotationBlockParserRuleCall_1_0()); 
	    }
		lv_comment_1_0=ruleFAnnotationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFEnumeratorRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_1_0, 
        		"FAnnotationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getFEnumeratorAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFEnumeratorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFEnumeratorAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFEnumeratorAccess().getValueAdditiveExpressionParserRuleCall_3_1_0()); 
	    }
		lv_value_4_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFEnumeratorRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFMapType
entryRuleFMapType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFMapTypeRule()); }
	 iv_ruleFMapType=ruleFMapType 
	 { $current=$iv_ruleFMapType.current; } 
	 EOF 
;

// Rule FMapType
ruleFMapType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFMapTypeAccess().getFMapTypeAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFMapTypeAccess().getCommentFAnnotationBlockParserRuleCall_1_0()); 
	    }
		lv_comment_1_0=ruleFAnnotationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFMapTypeRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_1_0, 
        		"FAnnotationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='map' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFMapTypeAccess().getMapKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getFMapTypeAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFMapTypeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFMapTypeAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFMapTypeAccess().getKeyTypeFTypeRefParserRuleCall_5_0()); 
	    }
		lv_keyType_5_0=ruleFTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFMapTypeRule());
	        }
       		set(
       			$current, 
       			"keyType",
        		lv_keyType_5_0, 
        		"FTypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='to' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFMapTypeAccess().getToKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFMapTypeAccess().getValueTypeFTypeRefParserRuleCall_7_0()); 
	    }
		lv_valueType_7_0=ruleFTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFMapTypeRule());
	        }
       		set(
       			$current, 
       			"valueType",
        		lv_valueType_7_0, 
        		"FTypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFMapTypeAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleFField
entryRuleFField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFFieldRule()); }
	 iv_ruleFField=ruleFField 
	 { $current=$iv_ruleFField.current; } 
	 EOF 
;

// Rule FField
ruleFField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFFieldAccess().getCommentFAnnotationBlockParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleFAnnotationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFFieldRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"FAnnotationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFFieldAccess().getTypeFTypeRefParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleFTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFFieldRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"FTypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_array_2_0=	'[' 
    {
        newLeafNode(lv_array_2_0, grammarAccess.getFFieldAccess().getArrayLeftSquareBracketKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFFieldRule());
	        }
       		setWithLastConsumed($current, "array", true, "[");
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFFieldAccess().getRightSquareBracketKeyword_2_1());
    }
)?(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getFFieldAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleFDeclaration
entryRuleFDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDeclarationRule()); }
	 iv_ruleFDeclaration=ruleFDeclaration 
	 { $current=$iv_ruleFDeclaration.current; } 
	 EOF 
;

// Rule FDeclaration
ruleFDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFDeclarationAccess().getTypeFTypeRefParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleFTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"FTypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_array_1_0=	'[' 
    {
        newLeafNode(lv_array_1_0, grammarAccess.getFDeclarationAccess().getArrayLeftSquareBracketKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDeclarationRule());
	        }
       		setWithLastConsumed($current, "array", true, "[");
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDeclarationAccess().getRightSquareBracketKeyword_1_1());
    }
)?(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getFDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFDeclarationAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDeclarationAccess().getRhsFInitializerExpressionParserRuleCall_3_1_0()); 
	    }
		lv_rhs_5_0=ruleFInitializerExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDeclarationRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_5_0, 
        		"FInitializerExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;







// Entry rule entryRuleFConstantDef
entryRuleFConstantDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFConstantDefRule()); }
	 iv_ruleFConstantDef=ruleFConstantDef 
	 { $current=$iv_ruleFConstantDef.current; } 
	 EOF 
;

// Rule FConstantDef
ruleFConstantDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFConstantDefAccess().getCommentFAnnotationBlockParserRuleCall_0_0()); 
	    }
		lv_comment_0_0=ruleFAnnotationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFConstantDefRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_0_0, 
        		"FAnnotationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='const' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFConstantDefAccess().getConstKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFConstantDefAccess().getTypeFTypeRefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleFTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFConstantDefRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"FTypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_array_3_0=	'[' 
    {
        newLeafNode(lv_array_3_0, grammarAccess.getFConstantDefAccess().getArrayLeftSquareBracketKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFConstantDefRule());
	        }
       		setWithLastConsumed($current, "array", true, "[");
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFConstantDefAccess().getRightSquareBracketKeyword_3_1());
    }
)?(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getFConstantDefAccess().getNameIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFConstantDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ID");
	    }

)
)	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFConstantDefAccess().getEqualsSignKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFConstantDefAccess().getRhsFInitializerExpressionParserRuleCall_6_0()); 
	    }
		lv_rhs_7_0=ruleFInitializerExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFConstantDefRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_7_0, 
        		"FInitializerExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFInitializerExpression
entryRuleFInitializerExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFInitializerExpressionRule()); }
	 iv_ruleFInitializerExpression=ruleFInitializerExpression 
	 { $current=$iv_ruleFInitializerExpression.current; } 
	 EOF 
;

// Rule FInitializerExpression
ruleFInitializerExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFInitializerExpressionAccess().getLogicalOrExpressionParserRuleCall_0()); 
    }
    this_LogicalOrExpression_0=ruleLogicalOrExpression
    { 
        $current = $this_LogicalOrExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFInitializerExpressionAccess().getFInitializerParserRuleCall_1()); 
    }
    this_FInitializer_1=ruleFInitializer
    { 
        $current = $this_FInitializer_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFInitializer
entryRuleFInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFInitializerRule()); }
	 iv_ruleFInitializer=ruleFInitializer 
	 { $current=$iv_ruleFInitializer.current; } 
	 EOF 
;

// Rule FInitializer
ruleFInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFInitializerAccess().getFCompoundInitializerParserRuleCall_0()); 
    }
    this_FCompoundInitializer_0=ruleFCompoundInitializer
    { 
        $current = $this_FCompoundInitializer_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFInitializerAccess().getFBracketInitializerParserRuleCall_1()); 
    }
    this_FBracketInitializer_1=ruleFBracketInitializer
    { 
        $current = $this_FBracketInitializer_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFCompoundInitializer
entryRuleFCompoundInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFCompoundInitializerRule()); }
	 iv_ruleFCompoundInitializer=ruleFCompoundInitializer 
	 { $current=$iv_ruleFCompoundInitializer.current; } 
	 EOF 
;

// Rule FCompoundInitializer
ruleFCompoundInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFCompoundInitializerAccess().getFCompoundInitializerAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFCompoundInitializerAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFCompoundInitializerAccess().getElementsFFieldInitializerParserRuleCall_2_0_0()); 
	    }
		lv_elements_2_0=ruleFFieldInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFCompoundInitializerRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"FFieldInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFCompoundInitializerAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFCompoundInitializerAccess().getElementsFFieldInitializerParserRuleCall_2_1_1_0()); 
	    }
		lv_elements_4_0=ruleFFieldInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFCompoundInitializerRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"FFieldInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFCompoundInitializerAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleFFieldInitializer
entryRuleFFieldInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFFieldInitializerRule()); }
	 iv_ruleFFieldInitializer=ruleFFieldInitializer 
	 { $current=$iv_ruleFFieldInitializer.current; } 
	 EOF 
;

// Rule FFieldInitializer
ruleFFieldInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFFieldInitializerRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFFieldInitializerAccess().getElementFFieldCrossReference_0_0()); 
	}

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFFieldInitializerAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFFieldInitializerAccess().getValueFInitializerExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleFInitializerExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFFieldInitializerRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"FInitializerExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFBracketInitializer
entryRuleFBracketInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFBracketInitializerRule()); }
	 iv_ruleFBracketInitializer=ruleFBracketInitializer 
	 { $current=$iv_ruleFBracketInitializer.current; } 
	 EOF 
;

// Rule FBracketInitializer
ruleFBracketInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFBracketInitializerAccess().getFBracketInitializerAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFBracketInitializerAccess().getLeftSquareBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFBracketInitializerAccess().getElementsFElementInitializerParserRuleCall_2_0_0()); 
	    }
		lv_elements_2_0=ruleFElementInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFBracketInitializerRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_2_0, 
        		"FElementInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFBracketInitializerAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFBracketInitializerAccess().getElementsFElementInitializerParserRuleCall_2_1_1_0()); 
	    }
		lv_elements_4_0=ruleFElementInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFBracketInitializerRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_4_0, 
        		"FElementInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFBracketInitializerAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleFElementInitializer
entryRuleFElementInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFElementInitializerRule()); }
	 iv_ruleFElementInitializer=ruleFElementInitializer 
	 { $current=$iv_ruleFElementInitializer.current; } 
	 EOF 
;

// Rule FElementInitializer
ruleFElementInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFElementInitializerAccess().getFElementInitializerAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFElementInitializerAccess().getFirstFInitializerExpressionParserRuleCall_1_0()); 
	    }
		lv_first_1_0=ruleFInitializerExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFElementInitializerRule());
	        }
       		set(
       			$current, 
       			"first",
        		lv_first_1_0, 
        		"FInitializerExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='=>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFElementInitializerAccess().getEqualsSignGreaterThanSignKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFElementInitializerAccess().getSecondFInitializerExpressionParserRuleCall_2_1_0()); 
	    }
		lv_second_3_0=ruleFInitializerExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFElementInitializerRule());
	        }
       		set(
       			$current, 
       			"second",
        		lv_second_3_0, 
        		"FInitializerExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFContract
entryRuleFContract returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFContractRule()); }
	 iv_ruleFContract=ruleFContract 
	 { $current=$iv_ruleFContract.current; } 
	 EOF 
;

// Rule FContract
ruleFContract returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFContractAccess().getFContractAction_0(),
            $current);
    }
)	otherlv_1='contract' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFContractAccess().getContractKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFContractAccess().getLeftCurlyBracketKeyword_2());
    }
(	otherlv_3='vars' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFContractAccess().getVarsKeyword_3_0());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFContractAccess().getLeftCurlyBracketKeyword_3_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFContractAccess().getVariablesFDeclarationParserRuleCall_3_2_0_0()); 
	    }
		lv_variables_5_0=ruleFDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFContractRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_5_0, 
        		"FDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFContractAccess().getSemicolonKeyword_3_2_1());
    }
)?)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFContractAccess().getRightCurlyBracketKeyword_3_3());
    }
)?	otherlv_8='PSM' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFContractAccess().getPSMKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFContractAccess().getStateGraphFStateGraphParserRuleCall_5_0()); 
	    }
		lv_stateGraph_9_0=ruleFStateGraph		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFContractRule());
	        }
       		set(
       			$current, 
       			"stateGraph",
        		lv_stateGraph_9_0, 
        		"FStateGraph");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFContractAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleFStateGraph
entryRuleFStateGraph returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFStateGraphRule()); }
	 iv_ruleFStateGraph=ruleFStateGraph 
	 { $current=$iv_ruleFStateGraph.current; } 
	 EOF 
;

// Rule FStateGraph
ruleFStateGraph returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFStateGraphAccess().getFStateGraphAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFStateGraphAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='initial' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFStateGraphAccess().getInitialKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFStateGraphRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getFStateGraphAccess().getInitialFStateCrossReference_3_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFStateGraphAccess().getStatesFStateParserRuleCall_4_0()); 
	    }
		lv_states_4_0=ruleFState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFStateGraphRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_4_0, 
        		"FState");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFStateGraphAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleFState
entryRuleFState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFStateRule()); }
	 iv_ruleFState=ruleFState 
	 { $current=$iv_ruleFState.current; } 
	 EOF 
;

// Rule FState
ruleFState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFStateAccess().getFStateAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFStateAccess().getCommentFAnnotationBlockParserRuleCall_1_0()); 
	    }
		lv_comment_1_0=ruleFAnnotationBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFStateRule());
	        }
       		set(
       			$current, 
       			"comment",
        		lv_comment_1_0, 
        		"FAnnotationBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_2='state' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFStateAccess().getStateKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getFStateAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFStateAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFStateAccess().getTransitionsFTransitionParserRuleCall_5_0()); 
	    }
		lv_transitions_5_0=ruleFTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFStateRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_5_0, 
        		"FTransition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFStateAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleFTransition
entryRuleFTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFTransitionRule()); }
	 iv_ruleFTransition=ruleFTransition 
	 { $current=$iv_ruleFTransition.current; } 
	 EOF 
;

// Rule FTransition
ruleFTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='on' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFTransitionAccess().getOnKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFTransitionAccess().getTriggerFTriggerParserRuleCall_1_0()); 
	    }
		lv_trigger_1_0=ruleFTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFTransitionRule());
	        }
       		set(
       			$current, 
       			"trigger",
        		lv_trigger_1_0, 
        		"FTrigger");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFTransitionAccess().getGuardFGuardParserRuleCall_2_0()); 
	    }
		lv_guard_2_0=ruleFGuard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFTransitionRule());
	        }
       		set(
       			$current, 
       			"guard",
        		lv_guard_2_0, 
        		"FGuard");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFTransitionAccess().getHyphenMinusGreaterThanSignKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFTransitionRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getFTransitionAccess().getToFStateCrossReference_4_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFTransitionAccess().getActionFBlockParserRuleCall_5_0()); 
	    }
		lv_action_5_0=ruleFBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFTransitionRule());
	        }
       		set(
       			$current, 
       			"action",
        		lv_action_5_0, 
        		"FBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFTrigger
entryRuleFTrigger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFTriggerRule()); }
	 iv_ruleFTrigger=ruleFTrigger 
	 { $current=$iv_ruleFTrigger.current; } 
	 EOF 
;

// Rule FTrigger
ruleFTrigger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFTriggerAccess().getEventFEventOnIfParserRuleCall_0()); 
	    }
		lv_event_0_0=ruleFEventOnIf		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFTriggerRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_0_0, 
        		"FEventOnIf");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFEventOnIf
entryRuleFEventOnIf returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFEventOnIfRule()); }
	 iv_ruleFEventOnIf=ruleFEventOnIf 
	 { $current=$iv_ruleFEventOnIf.current; } 
	 EOF 
;

// Rule FEventOnIf
ruleFEventOnIf returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='call' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFEventOnIfAccess().getCallKeyword_0_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFEventOnIfRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFEventOnIfAccess().getCallFMethodCrossReference_0_1_0()); 
	    }
		ruleID_WITH_SELECTOR		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_2='respond' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFEventOnIfAccess().getRespondKeyword_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFEventOnIfRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFEventOnIfAccess().getRespondFMethodCrossReference_1_1_0()); 
	    }
		ruleID_WITH_SELECTOR		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='error' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFEventOnIfAccess().getErrorKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFEventOnIfRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFEventOnIfAccess().getErrorFMethodCrossReference_2_1_0()); 
	    }
		ruleID_WITH_SELECTOR		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_6='signal' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFEventOnIfAccess().getSignalKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFEventOnIfRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFEventOnIfAccess().getSignalFBroadcastCrossReference_3_1_0()); 
	    }
		ruleID_WITH_SELECTOR		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_8='set' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFEventOnIfAccess().getSetKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFEventOnIfRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getFEventOnIfAccess().getSetFAttributeCrossReference_4_1_0()); 
	}

)
))
    |(	otherlv_10='update' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFEventOnIfAccess().getUpdateKeyword_5_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFEventOnIfRule());
	        }
        }
	otherlv_11=RULE_ID
	{
		newLeafNode(otherlv_11, grammarAccess.getFEventOnIfAccess().getUpdateFAttributeCrossReference_5_1_0()); 
	}

)
)))
;





// Entry rule entryRuleFGuard
entryRuleFGuard returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFGuardRule()); }
	 iv_ruleFGuard=ruleFGuard 
	 { $current=$iv_ruleFGuard.current; } 
	 EOF 
;

// Rule FGuard
ruleFGuard returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFGuardAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFGuardAccess().getConditionLogicalOrExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleLogicalOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFGuardRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"LogicalOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFGuardAccess().getRightSquareBracketKeyword_2());
    }
)
;





// Entry rule entryRuleFStatement
entryRuleFStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFStatementRule()); }
	 iv_ruleFStatement=ruleFStatement 
	 { $current=$iv_ruleFStatement.current; } 
	 EOF 
;

// Rule FStatement
ruleFStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFStatementAccess().getFAssignmentParserRuleCall_0()); 
    }
    this_FAssignment_0=ruleFAssignment
    { 
        $current = $this_FAssignment_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFStatementAccess().getFIfStatementParserRuleCall_1()); 
    }
    this_FIfStatement_1=ruleFIfStatement
    { 
        $current = $this_FIfStatement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFStatementAccess().getFBlockParserRuleCall_2()); 
    }
    this_FBlock_2=ruleFBlock
    { 
        $current = $this_FBlock_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFIfStatement
entryRuleFIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFIfStatementRule()); }
	 iv_ruleFIfStatement=ruleFIfStatement 
	 { $current=$iv_ruleFIfStatement.current; } 
	 EOF 
;

// Rule FIfStatement
ruleFIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFIfStatementAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFIfStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFIfStatementAccess().getConditionLogicalOrExpressionParserRuleCall_2_0()); 
	    }
		lv_condition_2_0=ruleLogicalOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFIfStatementRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_2_0, 
        		"LogicalOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFIfStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFIfStatementAccess().getThenFStatementParserRuleCall_4_0()); 
	    }
		lv_then_4_0=ruleFStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFIfStatementRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_4_0, 
        		"FStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFIfStatementAccess().getElseKeyword_5_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFIfStatementAccess().getElseFStatementParserRuleCall_5_1_0()); 
	    }
		lv_else_6_0=ruleFStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFIfStatementRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_6_0, 
        		"FStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFAssignment
entryRuleFAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFAssignmentRule()); }
	 iv_ruleFAssignment=ruleFAssignment 
	 { $current=$iv_ruleFAssignment.current; } 
	 EOF 
;

// Rule FAssignment
ruleFAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFAssignmentAccess().getLhsFQualifiedElementRefParserRuleCall_0_0()); 
	    }
		lv_lhs_0_0=ruleFQualifiedElementRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFAssignmentRule());
	        }
       		set(
       			$current, 
       			"lhs",
        		lv_lhs_0_0, 
        		"FQualifiedElementRef");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFAssignmentAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFAssignmentAccess().getRhsLogicalOrExpressionParserRuleCall_2_0()); 
	    }
		lv_rhs_2_0=ruleLogicalOrExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFAssignmentRule());
	        }
       		set(
       			$current, 
       			"rhs",
        		lv_rhs_2_0, 
        		"LogicalOrExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFBlock
entryRuleFBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFBlockRule()); }
	 iv_ruleFBlock=ruleFBlock 
	 { $current=$iv_ruleFBlock.current; } 
	 EOF 
;

// Rule FBlock
ruleFBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFBlockAccess().getFBlockAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFBlockAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFBlockAccess().getStatementsFStatementParserRuleCall_2_0()); 
	    }
		lv_statements_2_0=ruleFStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"FStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	 iv_ruleLogicalOrExpression=ruleLogicalOrExpression 
	 { $current=$iv_ruleLogicalOrExpression.current; } 
	 EOF 
;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0()); 
    }
    this_LogicalAndExpression_0=ruleLogicalAndExpression
    { 
        $current = $this_LogicalAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalOrExpressionAccess().getFBinaryOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getOpOperatorOrEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleOperatorOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"OperatorOr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getRightLogicalAndExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleLogicalAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"LogicalAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	 iv_ruleLogicalAndExpression=ruleLogicalAndExpression 
	 { $current=$iv_ruleLogicalAndExpression.current; } 
	 EOF 
;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
    }
    this_EqualityExpression_0=ruleEqualityExpression
    { 
        $current = $this_EqualityExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalAndExpressionAccess().getFBinaryOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getOpOperatorAndEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleOperatorAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"OperatorAnd");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getRightEqualityExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"EqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEqualityExpression
entryRuleEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityExpressionRule()); }
	 iv_ruleEqualityExpression=ruleEqualityExpression 
	 { $current=$iv_ruleEqualityExpression.current; } 
	 EOF 
;

// Rule EqualityExpression
ruleEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
    }
    this_RelationalExpression_0=ruleRelationalExpression
    { 
        $current = $this_RelationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityExpressionAccess().getFBinaryOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getOpOperatorEqualityEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleOperatorEquality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"OperatorEquality");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityExpressionAccess().getRightRelationalExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"RelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleRelationalExpression
entryRuleRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationalExpressionRule()); }
	 iv_ruleRelationalExpression=ruleRelationalExpression 
	 { $current=$iv_ruleRelationalExpression.current; } 
	 EOF 
;

// Rule RelationalExpression
ruleRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
    }
    this_AdditiveExpression_0=ruleAdditiveExpression
    { 
        $current = $this_AdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getRelationalExpressionAccess().getFBinaryOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getOpOperatorRelationalEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleOperatorRelational		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"OperatorRelational");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationalExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditiveExpressionRule()); }
	 iv_ruleAdditiveExpression=ruleAdditiveExpression 
	 { $current=$iv_ruleAdditiveExpression.current; } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_MultiplicativeExpression_0=ruleMultiplicativeExpression
    { 
        $current = $this_MultiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAdditiveExpressionAccess().getFBinaryOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getOpOperatorAdditiveEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleOperatorAdditive		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"OperatorAdditive");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"MultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	 iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression 
	 { $current=$iv_ruleMultiplicativeExpression.current; } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMultiplicativeExpressionAccess().getFBinaryOperationLeftAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpOperatorMultiplicativeEnumRuleCall_1_1_0()); 
	    }
		lv_op_2_0=ruleOperatorMultiplicative		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_2_0, 
        		"OperatorMultiplicative");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightPrimaryExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFUnaryOperationParserRuleCall_0()); 
    }
    this_FUnaryOperation_0=ruleFUnaryOperation
    { 
        $current = $this_FUnaryOperation_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSimplePrimaryExpressionParserRuleCall_1()); 
    }
    this_SimplePrimaryExpression_1=ruleSimplePrimaryExpression
    { 
        $current = $this_SimplePrimaryExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSimplePrimaryExpression
entryRuleSimplePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimplePrimaryExpressionRule()); }
	 iv_ruleSimplePrimaryExpression=ruleSimplePrimaryExpression 
	 { $current=$iv_ruleSimplePrimaryExpression.current; } 
	 EOF 
;

// Rule SimplePrimaryExpression
ruleSimplePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSimplePrimaryExpressionAccess().getFQualifiedElementRefParserRuleCall_0()); 
    }
    this_FQualifiedElementRef_0=ruleFQualifiedElementRef
    { 
        $current = $this_FQualifiedElementRef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimplePrimaryExpressionAccess().getFCurrentErrorParserRuleCall_1()); 
    }
    this_FCurrentError_1=ruleFCurrentError
    { 
        $current = $this_FCurrentError_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimplePrimaryExpressionAccess().getFMethodErrorEnumRefParserRuleCall_2()); 
    }
    this_FMethodErrorEnumRef_2=ruleFMethodErrorEnumRef
    { 
        $current = $this_FMethodErrorEnumRef_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimplePrimaryExpressionAccess().getFConstantParserRuleCall_3()); 
    }
    this_FConstant_3=ruleFConstant
    { 
        $current = $this_FConstant_3.current; 
        afterParserOrEnumRuleCall();
    }

    |(	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSimplePrimaryExpressionAccess().getLeftParenthesisKeyword_4_0());
    }

    { 
        newCompositeNode(grammarAccess.getSimplePrimaryExpressionAccess().getLogicalOrExpressionParserRuleCall_4_1()); 
    }
    this_LogicalOrExpression_5=ruleLogicalOrExpression
    { 
        $current = $this_LogicalOrExpression_5.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSimplePrimaryExpressionAccess().getRightParenthesisKeyword_4_2());
    }
))
;





// Entry rule entryRuleFUnaryOperation
entryRuleFUnaryOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFUnaryOperationRule()); }
	 iv_ruleFUnaryOperation=ruleFUnaryOperation 
	 { $current=$iv_ruleFUnaryOperation.current; } 
	 EOF 
;

// Rule FUnaryOperation
ruleFUnaryOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFUnaryOperationAccess().getFUnaryOperationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFUnaryOperationAccess().getOpOperatorUnaryEnumRuleCall_1_0()); 
	    }
		lv_op_1_0=ruleOperatorUnary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_1_0, 
        		"OperatorUnary");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFUnaryOperationAccess().getOperandSimplePrimaryExpressionParserRuleCall_2_0()); 
	    }
		lv_operand_2_0=ruleSimplePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"SimplePrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFCurrentError
entryRuleFCurrentError returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFCurrentErrorRule()); }
	 iv_ruleFCurrentError=ruleFCurrentError 
	 { $current=$iv_ruleFCurrentError.current; } 
	 EOF 
;

// Rule FCurrentError
ruleFCurrentError returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFCurrentErrorAccess().getFCurrentErrorAction_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getFCurrentErrorAccess().getErrorReferenceTerminalParserRuleCall_1()); 
    }
ruleErrorReferenceTerminal
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleErrorReferenceTerminal
entryRuleErrorReferenceTerminal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getErrorReferenceTerminalRule()); } 
	 iv_ruleErrorReferenceTerminal=ruleErrorReferenceTerminal 
	 { $current=$iv_ruleErrorReferenceTerminal.current.getText(); }  
	 EOF 
;

// Rule ErrorReferenceTerminal
ruleErrorReferenceTerminal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='errorval' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getErrorReferenceTerminalAccess().getErrorvalKeyword()); 
    }

    ;





// Entry rule entryRuleFMethodErrorEnumRef
entryRuleFMethodErrorEnumRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFMethodErrorEnumRefRule()); }
	 iv_ruleFMethodErrorEnumRef=ruleFMethodErrorEnumRef 
	 { $current=$iv_ruleFMethodErrorEnumRef.current; } 
	 EOF 
;

// Rule FMethodErrorEnumRef
ruleFMethodErrorEnumRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='errordef' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFMethodErrorEnumRefAccess().getErrordefKeyword_0());
    }
	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFMethodErrorEnumRefAccess().getFullStopKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFMethodErrorEnumRefRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getFMethodErrorEnumRefAccess().getEnumeratorFEnumeratorCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleFQualifiedElementRef
entryRuleFQualifiedElementRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQualifiedElementRefRule()); }
	 iv_ruleFQualifiedElementRef=ruleFQualifiedElementRef 
	 { $current=$iv_ruleFQualifiedElementRef.current; } 
	 EOF 
;

// Rule FQualifiedElementRef
ruleFQualifiedElementRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFQualifiedElementRefAccess().getFQualifiedElementRefAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFQualifiedElementRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFQualifiedElementRefAccess().getElementFEvaluableElementCrossReference_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getFQualifiedElementRefAccess().getFQualifiedElementRefQualifierAction_2_0(),
            $current);
    }
)	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFQualifiedElementRefAccess().getHyphenMinusGreaterThanSignKeyword_2_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFQualifiedElementRefRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getFQualifiedElementRefAccess().getFieldFFieldCrossReference_2_2_0()); 
	}

)
))*)
;





// Entry rule entryRuleFConstant
entryRuleFConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFConstantRule()); }
	 iv_ruleFConstant=ruleFConstant 
	 { $current=$iv_ruleFConstant.current; } 
	 EOF 
;

// Rule FConstant
ruleFConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFConstantAccess().getFFloatConstantParserRuleCall_0()); 
    }
    this_FFloatConstant_0=ruleFFloatConstant
    { 
        $current = $this_FFloatConstant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFConstantAccess().getFDoubleConstantParserRuleCall_1()); 
    }
    this_FDoubleConstant_1=ruleFDoubleConstant
    { 
        $current = $this_FDoubleConstant_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFConstantAccess().getFIntegerConstantParserRuleCall_2()); 
    }
    this_FIntegerConstant_2=ruleFIntegerConstant
    { 
        $current = $this_FIntegerConstant_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFConstantAccess().getFBooleanConstantParserRuleCall_3()); 
    }
    this_FBooleanConstant_3=ruleFBooleanConstant
    { 
        $current = $this_FBooleanConstant_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFConstantAccess().getFStringConstantParserRuleCall_4()); 
    }
    this_FStringConstant_4=ruleFStringConstant
    { 
        $current = $this_FStringConstant_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFDoubleConstant
entryRuleFDoubleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDoubleConstantRule()); }
	 iv_ruleFDoubleConstant=ruleFDoubleConstant 
	 { $current=$iv_ruleFDoubleConstant.current; } 
	 EOF 
;

// Rule FDoubleConstant
ruleFDoubleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=RULE_E_DOUBLE_OBJECT
		{
			newLeafNode(lv_val_0_0, grammarAccess.getFDoubleConstantAccess().getValE_DOUBLE_OBJECTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDoubleConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"E_DOUBLE_OBJECT");
	    }

)
)
;





// Entry rule entryRuleFFloatConstant
entryRuleFFloatConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFFloatConstantRule()); }
	 iv_ruleFFloatConstant=ruleFFloatConstant 
	 { $current=$iv_ruleFFloatConstant.current; } 
	 EOF 
;

// Rule FFloatConstant
ruleFFloatConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=RULE_E_FLOAT_OBJECT
		{
			newLeafNode(lv_val_0_0, grammarAccess.getFFloatConstantAccess().getValE_FLOAT_OBJECTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFFloatConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"E_FLOAT_OBJECT");
	    }

)
)
;





// Entry rule entryRuleFIntegerConstant
entryRuleFIntegerConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFIntegerConstantRule()); }
	 iv_ruleFIntegerConstant=ruleFIntegerConstant 
	 { $current=$iv_ruleFIntegerConstant.current; } 
	 EOF 
;

// Rule FIntegerConstant
ruleFIntegerConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFIntegerConstantAccess().getValE_BigIntegerParserRuleCall_0()); 
	    }
		lv_val_0_0=ruleE_BigInteger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFIntegerConstantRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"E_BigInteger");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFBooleanConstant
entryRuleFBooleanConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFBooleanConstantRule()); }
	 iv_ruleFBooleanConstant=ruleFBooleanConstant 
	 { $current=$iv_ruleFBooleanConstant.current; } 
	 EOF 
;

// Rule FBooleanConstant
ruleFBooleanConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getFBooleanConstantAccess().getValEBooleanParserRuleCall_0()); 
	    }
		lv_val_0_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFBooleanConstantRule());
	        }
       		set(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFStringConstant
entryRuleFStringConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFStringConstantRule()); }
	 iv_ruleFStringConstant=ruleFStringConstant 
	 { $current=$iv_ruleFStringConstant.current; } 
	 EOF 
;

// Rule FStringConstant
ruleFStringConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_val_0_0=RULE_STRING
		{
			newLeafNode(lv_val_0_0, grammarAccess.getFStringConstantAccess().getValSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFStringConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleFAnnotationBlock
entryRuleFAnnotationBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFAnnotationBlockRule()); }
	 iv_ruleFAnnotationBlock=ruleFAnnotationBlock 
	 { $current=$iv_ruleFAnnotationBlock.current; } 
	 EOF 
;

// Rule FAnnotationBlock
ruleFAnnotationBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<**' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFAnnotationBlockAccess().getLessThanSignAsteriskAsteriskKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFAnnotationBlockAccess().getElementsFAnnotationParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleFAnnotation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFAnnotationBlockRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"FAnnotation");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2='**>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFAnnotationBlockAccess().getAsteriskAsteriskGreaterThanSignKeyword_2());
    }
)
;





// Entry rule entryRuleFAnnotation
entryRuleFAnnotation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFAnnotationRule()); }
	 iv_ruleFAnnotation=ruleFAnnotation 
	 { $current=$iv_ruleFAnnotation.current; } 
	 EOF 
;

// Rule FAnnotation
ruleFAnnotation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_rawText_0_0=RULE_ANNOTATION_STRING
		{
			newLeafNode(lv_rawText_0_0, grammarAccess.getFAnnotationAccess().getRawTextANNOTATION_STRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFAnnotationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"rawText",
        		lv_rawText_0_0, 
        		"ANNOTATION_STRING");
	    }

)
)
;





// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); } 
	 iv_ruleEBoolean=ruleEBoolean 
	 { $current=$iv_ruleEBoolean.current.getText(); }  
	 EOF 
;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_0()); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleE_BigInteger
entryRuleE_BigInteger returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getE_BigIntegerRule()); } 
	 iv_ruleE_BigInteger=ruleE_BigInteger 
	 { $current=$iv_ruleE_BigInteger.current.getText(); }  
	 EOF 
;

// Rule E_BigInteger
ruleE_BigInteger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getE_BigIntegerAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_HEX_1=RULE_HEX    {
		$current.merge(this_HEX_1);
    }

    { 
    newLeafNode(this_HEX_1, grammarAccess.getE_BigIntegerAccess().getHEXTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceImportedFQNParserRuleCall_1_0_0_0()); 
	    }
		lv_importedNamespace_1_0=ruleImportedFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"ImportedFQN");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='from' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getImportAccess().getFromKeyword_1_0_1());
    }
)
    |	otherlv_3='model' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getImportAccess().getModelKeyword_1_1());
    }
)(
(
		lv_importURI_4_0=RULE_STRING
		{
			newLeafNode(lv_importURI_4_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_4_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleImportedFQN
entryRuleImportedFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportedFQNRule()); } 
	 iv_ruleImportedFQN=ruleImportedFQN 
	 { $current=$iv_ruleImportedFQN.current.getText(); }  
	 EOF 
;

// Rule ImportedFQN
ruleImportedFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImportedFQNAccess().getFQNParserRuleCall_0()); 
    }
    this_FQN_0=ruleFQN    {
		$current.merge(this_FQN_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImportedFQNAccess().getFullStopKeyword_1_0()); 
    }

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImportedFQNAccess().getAsteriskKeyword_1_1()); 
    }
)?)
    ;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleID_WITH_SELECTOR
entryRuleID_WITH_SELECTOR returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getID_WITH_SELECTORRule()); } 
	 iv_ruleID_WITH_SELECTOR=ruleID_WITH_SELECTOR 
	 { $current=$iv_ruleID_WITH_SELECTOR.current.getText(); }  
	 EOF 
;

// Rule ID_WITH_SELECTOR
ruleID_WITH_SELECTOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getID_WITH_SELECTORAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getID_WITH_SELECTORAccess().getColonKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getID_WITH_SELECTORAccess().getIDTerminalRuleCall_1_1()); 
    }
)?)
    ;





// Rule FBasicTypeId
ruleFBasicTypeId returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='undefined' 
	{
        $current = grammarAccess.getFBasicTypeIdAccess().getUndefinedEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFBasicTypeIdAccess().getUndefinedEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Int8' 
	{
        $current = grammarAccess.getFBasicTypeIdAccess().getInt8EnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFBasicTypeIdAccess().getInt8EnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='UInt8' 
	{
        $current = grammarAccess.getFBasicTypeIdAccess().getUInt8EnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFBasicTypeIdAccess().getUInt8EnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Int16' 
	{
        $current = grammarAccess.getFBasicTypeIdAccess().getInt16EnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFBasicTypeIdAccess().getInt16EnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='UInt16' 
	{
        $current = grammarAccess.getFBasicTypeIdAccess().getUInt16EnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getFBasicTypeIdAccess().getUInt16EnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='Int32' 
	{
        $current = grammarAccess.getFBasicTypeIdAccess().getInt32EnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getFBasicTypeIdAccess().getInt32EnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='UInt32' 
	{
        $current = grammarAccess.getFBasicTypeIdAccess().getUInt32EnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getFBasicTypeIdAccess().getUInt32EnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='Int64' 
	{
        $current = grammarAccess.getFBasicTypeIdAccess().getInt64EnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getFBasicTypeIdAccess().getInt64EnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='UInt64' 
	{
        $current = grammarAccess.getFBasicTypeIdAccess().getUInt64EnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getFBasicTypeIdAccess().getUInt64EnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='Boolean' 
	{
        $current = grammarAccess.getFBasicTypeIdAccess().getBooleanEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getFBasicTypeIdAccess().getBooleanEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='String' 
	{
        $current = grammarAccess.getFBasicTypeIdAccess().getStringEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getFBasicTypeIdAccess().getStringEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='Float' 
	{
        $current = grammarAccess.getFBasicTypeIdAccess().getFloatEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getFBasicTypeIdAccess().getFloatEnumLiteralDeclaration_11()); 
    }
)
    |(	enumLiteral_12='Double' 
	{
        $current = grammarAccess.getFBasicTypeIdAccess().getDoubleEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getFBasicTypeIdAccess().getDoubleEnumLiteralDeclaration_12()); 
    }
)
    |(	enumLiteral_13='ByteBuffer' 
	{
        $current = grammarAccess.getFBasicTypeIdAccess().getByteBufferEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_13, grammarAccess.getFBasicTypeIdAccess().getByteBufferEnumLiteralDeclaration_13()); 
    }
));



// Rule OperatorOr
ruleOperatorOr returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='||' 
	{
        $current = grammarAccess.getOperatorOrAccess().getOrEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperatorOrAccess().getOrEnumLiteralDeclaration()); 
    }
);



// Rule OperatorAnd
ruleOperatorAnd returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='&&' 
	{
        $current = grammarAccess.getOperatorAndAccess().getAndEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperatorAndAccess().getAndEnumLiteralDeclaration()); 
    }
);



// Rule OperatorEquality
ruleOperatorEquality returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='==' 
	{
        $current = grammarAccess.getOperatorEqualityAccess().getEqualEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperatorEqualityAccess().getEqualEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='!=' 
	{
        $current = grammarAccess.getOperatorEqualityAccess().getUnequalEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperatorEqualityAccess().getUnequalEnumLiteralDeclaration_1()); 
    }
));



// Rule OperatorRelational
ruleOperatorRelational returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='<' 
	{
        $current = grammarAccess.getOperatorRelationalAccess().getSmallerEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperatorRelationalAccess().getSmallerEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='<=' 
	{
        $current = grammarAccess.getOperatorRelationalAccess().getSmallerOrEqualEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperatorRelationalAccess().getSmallerOrEqualEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='>=' 
	{
        $current = grammarAccess.getOperatorRelationalAccess().getGreaterOrEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOperatorRelationalAccess().getGreaterOrEqualEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='>' 
	{
        $current = grammarAccess.getOperatorRelationalAccess().getGreaterEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getOperatorRelationalAccess().getGreaterEnumLiteralDeclaration_3()); 
    }
));



// Rule OperatorAdditive
ruleOperatorAdditive returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='+' 
	{
        $current = grammarAccess.getOperatorAdditiveAccess().getAdditionEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperatorAdditiveAccess().getAdditionEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getOperatorAdditiveAccess().getSubtractionEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperatorAdditiveAccess().getSubtractionEnumLiteralDeclaration_1()); 
    }
));



// Rule OperatorMultiplicative
ruleOperatorMultiplicative returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='*' 
	{
        $current = grammarAccess.getOperatorMultiplicativeAccess().getMultiplicationEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperatorMultiplicativeAccess().getMultiplicationEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='/' 
	{
        $current = grammarAccess.getOperatorMultiplicativeAccess().getDivisionEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperatorMultiplicativeAccess().getDivisionEnumLiteralDeclaration_1()); 
    }
));



// Rule OperatorUnary
ruleOperatorUnary returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='!' 
	{
        $current = grammarAccess.getOperatorUnaryAccess().getNegationEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOperatorUnaryAccess().getNegationEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='-' 
	{
        $current = grammarAccess.getOperatorUnaryAccess().getSubtractionEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOperatorUnaryAccess().getSubtractionEnumLiteralDeclaration_1()); 
    }
));



RULE_E_DOUBLE_OBJECT : RULE_INT '.' RULE_INT ('e' '-'? RULE_INT)? 'd';

RULE_E_FLOAT_OBJECT : RULE_INT '.' RULE_INT ('e' '-'? RULE_INT)? 'f';

RULE_HEX : ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')+;

RULE_ANNOTATION_STRING : '@' ('a'..'z'|'-')+ (' '|'\t')* ':' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'*'|'@')))*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


