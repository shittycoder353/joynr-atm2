/*
 * #%L
 * %%
 * Copyright (C) 2011 - 2017 BMW Car IT GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package infrastructure

import infrastructure.* from "AccessControlGenericTypes.fidl"

<**
	@description: Data types used in communication between Local and Global
		Domain Access Controller (LDAC and GDAC).
**>
typeCollection DacTypes {
	<**
		@description: The role of a user defines the rights for changing Access
			Control Lists (ACLs).
	**>
	enumeration Role {
		<**
			@description: Allows for changing Master Access Control List (Master ACLs),
				or Master Registration Control List (Master RCL).
		**>
		MASTER
		<**
			@description: Allows for changing Owner Access Control Lists (Owner ACLs),
				or Owner Registration Control List (Owner RCL).
		**>
		OWNER
	}

	<**
		@description: The Domain Role Entry (DRE) stores domains for users/role combination.
			User may become specified role when accessing given domains ACEs/RCEs in ACL/RCL.
			DREs are stored in the Domain Roles Table (DRT) using the pair (uid, role) as
			combined primary key.
	**>
	struct DomainRoleEntry {
		<**
			@description: The unique user ID (UID) this entry applies to.
		**>
		String uid
		<**
			@description: A list of domains this entry applies to. A domain might also contain
				the wildcard character (asterisk sign) to refer to all (sub-) domains.
		**>
		String[] domains
		<**
			@description: The role that is assigned to the specified user for the specified
				domains.
		**>
		Role role
	}
}


<**
	@description: A joynr internal interface that is used by the Local Domain
		Access Controller (LDAC) to access the role related functionality of the
		Global Domain Access Controller (GDAC).

		The GDAC is a joynr backend component that consists of the Domain
		Role Table (DRT), the Master Access Control List (Master ACL), one optional
		Mediator ACL and the Owner ACL.
		The DRT controls whether a user is allowed to change Access Control
		Entries (ACEs, cf. AccessControlEntry) that apply to a certain domain.
		The Master ACL and the optional Mediator ACL store default permissions and
		Trust Levels (TLs) of users for a domain/interface/operations combination
		(cf. MasterAccessControlEntry). Additionally, it contains possible permissions
		and TLs to be used to override default permissions and TLs in Owner Access
		Control Entries (Owner ACEs).
		The Owner ACL stores permissions and Trust Levels (TLs) of users for a
		domain/interface/operations combination (cf. OwnerAccessControlEntry).
**>
interface GlobalDomainRoleController {
	version {major 0 minor 1}

	<**
		@description: Returns a list of DREs that apply to the user uid.
			the list contains max two entries (since we only have two roles Master and Owner).
			Used to get domain roles when a user logs in.
	**>
	method getDomainRoles {
		in {
			String uid
		}
		out {
			DacTypes.DomainRoleEntry[] domainRoleEntries
		}
	}

	<**
		@description: Updates an existing entry (according to primary key)
			or adds a new entry if not existent.
	**>
	method updateDomainRole {
		in {
			DacTypes.DomainRoleEntry updatedEntry
		}
		out {
			Boolean success
		}
	}

	<**
		@description: Removes an entry according to the specified primary key.
	**>
	method removeDomainRole {
		in {
			String uid
			DacTypes.Role role
		}
		out {
			Boolean success
		}
	}

	<**
		@description: Event that is fired when new domain role
			entry is added, an existing entry changed or is removed.
			The event includes new domain role entry as well as the type of
			the change.
			Used by the LocalDomainAccessController to subscribe to updates for
			the current user.
			MULTICAST PARTITIONS:
			When firing the event, it is broadcast using the user ID of the
			domain role as a partition. So when subscribing you either have
			to subscribe using a wildcard partition (e.g. '+'), or else subscribe
			for exactly the user ID you're interested in.
			Note, however, that as partitions only acceess alpha-numeric characters
			all other characters (such as '.') are stripped from the various values.
	**>
	broadcast domainRoleEntryChanged {
		out {
			DacTypes.ChangeType typeOfChange
			DacTypes.DomainRoleEntry changedDomainRoleEntry
		}
	}
}
