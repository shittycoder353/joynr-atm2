/*
 * #%L
 * %%
 * Copyright (C) 2011 - 2017 BMW Car IT GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package infrastructure

import infrastructure.* from "AccessControlGenericTypes.fidl"
import infrastructure.* from "AccessControlTypes.fidl"

<**
	@description: A joynr internal interface that is used by the Local Domain
		Access Controller (LDAC) to access the read-only and broadcast related
		access and registration control functionality of the Global Domain Access
		Controller (GDAC).

		The GDAC is a joynr backend component that consists of the Domain
		Role Table (DRT), the Master Access Control List (Master ACL), one optional
		Mediator ACL and the Owner ACL.
		The DRT controls whether a user is allowed to change Access Control
		Entries (ACEs, cf. AccessControlEntry) that apply to a certain domain.
		The Master ACL and the optional Mediator ACL store default permissions and
		Trust Levels (TLs) of users for a domain/interface/operations combination
		(cf. MasterAccessControlEntry). Additionally, it contains possible permissions
		and TLs to be used to override default permissions and TLs in Owner Access
		Control Entries (Owner ACEs).
		The Owner ACL stores permissions and Trust Levels (TLs) of users for a
		domain/interface/operations combination (cf. OwnerAccessControlEntry).
**>
interface GlobalDomainAccessController {
	version {major 0 minor 1}

	<**
		@description: Returns a list of entries that apply to user uid,
			i.e. the entries that define the access rights of the user uid.
			Used by an Master ACL GUI to show access rights of a user
			Used when a user logs in to prefetch applying entries to provide
			early feedback on consumer side.
	**>
	method getMasterAccessControlEntries {
		in {
			String uid
		}
		out {
			DacTypes.MasterAccessControlEntry[] masterAces
		}
	}

	<**
		@description: Returns a list of entries that apply to the domain and
			interface combination. Used when a provider is registered to prefetch
			applying entries.
	**>
	method getMasterAccessControlEntries {
		in {
			String domain
			String interfaceName
		}
		out {
			DacTypes.MasterAccessControlEntry[] masterAces
		}
	}

	<**
		@description: Returns a list of entries that apply to user uid,
			i.e. the entries that define the access rights of the user uid.
			Used by a Mediator ACL GUI to show access rights of a user
			Used when a user logs in to prefetch applying entries to provide
			early feedback on consumer side.
	**>
	method getMediatorAccessControlEntries {
		in {
			String uid
		}
		out {
			DacTypes.MasterAccessControlEntry[] mediatorAces
		}
	}

	<**
		@description: Returns a list of entries that apply to the domain and
			interface combination. Used when a provider is registered to prefetch
			applying entries.
	**>
	method getMediatorAccessControlEntries {
		in {
			String domain
			String interfaceName
		}
		out {
			DacTypes.MasterAccessControlEntry[] mediatorAces
		}
	}

	<**
		@description: Returns a list of entries that apply to user uid,
			i.e. the entries that define the access rights of the user uid.
			Used by an Owner ACL GUI to show access rights of a user.
			Used when a user logs in to prefetch applying entries to provide
			early feedback on consumer side.
	**>
	method getOwnerAccessControlEntries {
		in {
			String uid
		}
		out {
			DacTypes.OwnerAccessControlEntry[] ownerAces
		}
	}

	<**
		@description: Returns a list of entries that apply to the domain and
			interface combination. Used when a provider is registered to
			prefetch applying entries.
	**>
	method getOwnerAccessControlEntries {
		in {
			String domain
			String interfaceName
		}
		out {
			DacTypes.OwnerAccessControlEntry[] ownerAces
		}
	}

	<**
		@description: Returns a list of entries that apply to user uid,
			i.e. the entries that define the registration rights of the user uid.
			Used by a Master RCL GUI to show registration rights of a user.
			Used when a user logs in to prefetch applying entries.
	**>
	method getMasterRegistrationControlEntries {
		in {
			String uid
		}
		out {
			DacTypes.MasterRegistrationControlEntry[] masterRces
		}
	}

	<**
		@description: Returns a list of entries that apply to user uid,
			i.e. the entries that define the registration rights of the user uid.
			Used by an Mediator RCL GUI to show registration rights of a user.
			Used when a user logs in to prefetch applying entries.
	**>
	method getMediatorRegistrationControlEntries {
		in {
			String uid
		}
		out {
			DacTypes.MasterRegistrationControlEntry[] mediatorRces
		}
	}

	<**
		@description: Returns a list of entries that apply to user uid,
			i.e. the entries that define the registration rights of the user uid.
			Used by a Master RCL GUI to show registration rights of a user.
			Used when a user logs in to prefetch applying entries.
	**>
	method getOwnerRegistrationControlEntries {
		in {
			String uid
		}
		out {
			DacTypes.OwnerRegistrationControlEntry[] ownerRces
		}
	}

	<**
		@description: Event that is fired when a new master access
			control entry is added or an existing entry is changed or removed.
			The event includes the new access control entry as well as the
			the type of change.
			MULTICAST PARTITINOS:
			This even is broadcast using the following partition structure:
			<user ID> / <domain> / <interface>
			Note, however, that as partitions only acceess alpha-numeric characters
			all other characters (such as '.') are stripped from the various values.
	**>
	broadcast masterAccessControlEntryChanged {
		out {
			DacTypes.ChangeType typeOfChange
			DacTypes.MasterAccessControlEntry changedMasterAce
		}
	}

	<**
		@description: Event that is fired when new mediator access
			control entry is added or an existing entry is changed or removed.
			The event includes the new mediator access control entry.
			MULTICAST PARTITINOS:
			This even is broadcast using the following partition structure:
			<user ID> / <domain> / <interface>
			Note, however, that as partitions only acceess alpha-numeric characters
			all other characters (such as '.') are stripped from the various values.
	**>
	broadcast mediatorAccessControlEntryChanged {
		out {
			DacTypes.ChangeType typeOfChange
			DacTypes.MasterAccessControlEntry changedMediatorAce
		}
	}

	<**
		@description: Event that is fired when a new owner access
			control entry is added or an existing entry is changed or removed.
			The event includes the new owner access control entry as well as the
			type of the change.
			MULTICAST PARTITINOS:
			This even is broadcast using the following partition structure:
			<user ID> / <domain> / <interface>
			Note, however, that as partitions only acceess alpha-numeric characters
			all other characters (such as '.') are stripped from the various values.
	**>
	broadcast ownerAccessControlEntryChanged {
		out {
			DacTypes.ChangeType typeOfChange
			DacTypes.OwnerAccessControlEntry changedOwnerAce
		}
	}

	<**
		@description: Event that is fired when a new master registration
			control entry is added or an existing entry is changed or removed.
			The event includes the new master registration control entry as
			well as the type of change.
			MULTICAST PARTITINOS:
			When firing the event, it is broadcast using the user ID of the
			domain role as a partition. So when subscribing you either have
			to subscribe using a wildcard partition (e.g. '+'), or else subscribe
			for exactly the user ID you're interested in.
			Note, however, that as partitions only acceess alpha-numeric characters
			all other characters (such as '.') are stripped from the various values.
	**>
	broadcast masterRegistrationControlEntryChanged {
		out {
			DacTypes.ChangeType typeOfChange
			DacTypes.MasterRegistrationControlEntry changedMasterRce
		}
	}

	<**
		@description: Event that is fired when a new mediator registration
			control entry is added or an existing entry is changed or removed.
			The event includes the new master registration control entry as
			well as the type of change.
			MULTICAST PARTITINOS:
			When firing the event, it is broadcast using the user ID of the
			domain role as a partition. So when subscribing you either have
			to subscribe using a wildcard partition (e.g. '+'), or else subscribe
			for exactly the user ID you're interested in.
			Note, however, that as partitions only acceess alpha-numeric characters
			all other characters (such as '.') are stripped from the various values.
	**>
	broadcast mediatorRegistrationControlEntryChanged {
		out {
			DacTypes.ChangeType typeOfChange
			DacTypes.MasterRegistrationControlEntry changedMediatorRce
		}
	}

	<**
		@description: Event that is fired when a new owner registration
			control entry is added or an existing entry is changed or removed.
			The event includes the new owner registration control entry as
			well as the type of the change.
			MULTICAST PARTITINOS:
			When firing the event, it is broadcast using the user ID of the
			domain role as a partition. So when subscribing you either have
			to subscribe using a wildcard partition (e.g. '+'), or else subscribe
			for exactly the user ID you're interested in.
			Note, however, that as partitions only acceess alpha-numeric characters
			all other characters (such as '.') are stripped from the various values.
	**>
	broadcast ownerRegistrationControlEntryChanged {
		out {
			DacTypes.ChangeType typeOfChange
			DacTypes.OwnerRegistrationControlEntry changedOwnerRce
		}
	}
}
