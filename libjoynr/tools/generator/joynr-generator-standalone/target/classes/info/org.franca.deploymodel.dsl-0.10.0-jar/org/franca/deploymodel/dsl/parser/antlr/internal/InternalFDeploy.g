/*
* generated by Xtext
*/
grammar InternalFDeploy;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.franca.deploymodel.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.franca.deploymodel.dsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.franca.deploymodel.dsl.services.FDeployGrammarAccess;

}

@parser::members {

 	private FDeployGrammarAccess grammarAccess;
 	
    public InternalFDeployParser(TokenStream input, FDeployGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "FDModel";	
   	}
   	
   	@Override
   	protected FDeployGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleFDModel
entryRuleFDModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDModelRule()); }
	 iv_ruleFDModel=ruleFDModel 
	 { $current=$iv_ruleFDModel.current; } 
	 EOF 
;

// Rule FDModel
ruleFDModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFDModelAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDModelRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFDModelAccess().getSpecificationsFDSpecificationParserRuleCall_1_0()); 
	    }
		lv_specifications_1_0=ruleFDSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDModelRule());
	        }
       		add(
       			$current, 
       			"specifications",
        		lv_specifications_1_0, 
        		"FDSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getFDModelAccess().getDeploymentsFDRootElementParserRuleCall_2_0()); 
	    }
		lv_deployments_2_0=ruleFDRootElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDModelRule());
	        }
       		add(
       			$current, 
       			"deployments",
        		lv_deployments_2_0, 
        		"FDRootElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
((
(
		lv_importURI_1_0=RULE_STRING
		{
			newLeafNode(lv_importURI_1_0, grammarAccess.getImportAccess().getImportURISTRINGTerminalRuleCall_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_1_0, 
        		"STRING");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedSpecFQNParserRuleCall_1_1_0()); 
	    }
		lv_importedSpec_2_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedSpec",
        		lv_importedSpec_2_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleFDSpecification
entryRuleFDSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDSpecificationRule()); }
	 iv_ruleFDSpecification=ruleFDSpecification 
	 { $current=$iv_ruleFDSpecification.current; } 
	 EOF 
;

// Rule FDSpecification
ruleFDSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='specification' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDSpecificationAccess().getSpecificationKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDSpecificationAccess().getNameFQNParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDSpecificationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDSpecificationAccess().getExtendsKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDSpecificationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDSpecificationAccess().getBaseFDSpecificationCrossReference_2_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFDSpecificationAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDSpecificationAccess().getDeclarationsFDDeclarationParserRuleCall_4_0()); 
	    }
		lv_declarations_5_0=ruleFDDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDSpecificationRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_5_0, 
        		"FDDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFDSpecificationAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleFDDeclaration
entryRuleFDDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDDeclarationRule()); }
	 iv_ruleFDDeclaration=ruleFDDeclaration 
	 { $current=$iv_ruleFDDeclaration.current; } 
	 EOF 
;

// Rule FDDeclaration
ruleFDDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDDeclarationAccess().getForKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDDeclarationAccess().getHostFDPropertyHostEnumRuleCall_1_0()); 
	    }
		lv_host_1_0=ruleFDPropertyHost		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDDeclarationRule());
	        }
       		set(
       			$current, 
       			"host",
        		lv_host_1_0, 
        		"FDPropertyHost");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDDeclarationAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDDeclarationAccess().getPropertiesFDPropertyDeclParserRuleCall_3_0()); 
	    }
		lv_properties_3_0=ruleFDPropertyDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDDeclarationRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_3_0, 
        		"FDPropertyDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFDDeclarationAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFDPropertyDecl
entryRuleFDPropertyDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDPropertyDeclRule()); }
	 iv_ruleFDPropertyDecl=ruleFDPropertyDecl 
	 { $current=$iv_ruleFDPropertyDecl.current; } 
	 EOF 
;

// Rule FDPropertyDecl
ruleFDPropertyDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFDPropertyDeclAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDPropertyDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFDPropertyDeclAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDPropertyDeclAccess().getTypeFDTypeRefParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleFDTypeRef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDPropertyDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"FDTypeRef");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFDPropertyDeclAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDPropertyDeclAccess().getFlagsFDPropertyFlagParserRuleCall_3_1_0()); 
	    }
		lv_flags_4_0=ruleFDPropertyFlag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDPropertyDeclRule());
	        }
       		add(
       			$current, 
       			"flags",
        		lv_flags_4_0, 
        		"FDPropertyFlag");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFDPropertyDeclAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDPropertyDeclAccess().getFlagsFDPropertyFlagParserRuleCall_3_2_1_0()); 
	    }
		lv_flags_6_0=ruleFDPropertyFlag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDPropertyDeclRule());
	        }
       		add(
       			$current, 
       			"flags",
        		lv_flags_6_0, 
        		"FDPropertyFlag");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFDPropertyDeclAccess().getRightParenthesisKeyword_3_3());
    }
)?	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFDPropertyDeclAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleFDPropertyFlag
entryRuleFDPropertyFlag returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDPropertyFlagRule()); }
	 iv_ruleFDPropertyFlag=ruleFDPropertyFlag 
	 { $current=$iv_ruleFDPropertyFlag.current; } 
	 EOF 
;

// Rule FDPropertyFlag
ruleFDPropertyFlag returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_optional_0_0=	'optional' 
    {
        newLeafNode(lv_optional_0_0, grammarAccess.getFDPropertyFlagAccess().getOptionalOptionalKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDPropertyFlagRule());
	        }
       		setWithLastConsumed($current, "optional", lv_optional_0_0, "optional");
	    }

)
)
    |(	otherlv_1='default:' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFDPropertyFlagAccess().getDefaultKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDPropertyFlagAccess().getDefaultFDComplexValueParserRuleCall_1_1_0()); 
	    }
		lv_default_2_0=ruleFDComplexValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDPropertyFlagRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_2_0, 
        		"FDComplexValue");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleFDTypeRef
entryRuleFDTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDTypeRefRule()); }
	 iv_ruleFDTypeRef=ruleFDTypeRef 
	 { $current=$iv_ruleFDTypeRef.current; } 
	 EOF 
;

// Rule FDTypeRef
ruleFDTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getFDTypeRefAccess().getPredefinedFDPredefinedTypeIdEnumRuleCall_0_0_0()); 
	    }
		lv_predefined_0_0=ruleFDPredefinedTypeId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDTypeRefRule());
	        }
       		set(
       			$current, 
       			"predefined",
        		lv_predefined_0_0, 
        		"FDPredefinedTypeId");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFDTypeRefAccess().getComplexFDTypeParserRuleCall_0_1_0()); 
	    }
		lv_complex_1_0=ruleFDType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDTypeRefRule());
	        }
       		set(
       			$current, 
       			"complex",
        		lv_complex_1_0, 
        		"FDType");
	        afterParserOrEnumRuleCall();
	    }

)
))(
(
		lv_array_2_0=	'[]' 
    {
        newLeafNode(lv_array_2_0, grammarAccess.getFDTypeRefAccess().getArrayLeftSquareBracketRightSquareBracketKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDTypeRefRule());
	        }
       		setWithLastConsumed($current, "array", lv_array_2_0, "[]");
	    }

)
)?)
;





// Entry rule entryRuleFDType
entryRuleFDType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDTypeRule()); }
	 iv_ruleFDType=ruleFDType 
	 { $current=$iv_ruleFDType.current; } 
	 EOF 
;

// Rule FDType
ruleFDType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getFDTypeAccess().getFDEnumTypeParserRuleCall()); 
    }
    this_FDEnumType_0=ruleFDEnumType
    { 
        $current = $this_FDEnumType_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleFDEnumType
entryRuleFDEnumType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDEnumTypeRule()); }
	 iv_ruleFDEnumType=ruleFDEnumType 
	 { $current=$iv_ruleFDEnumType.current; } 
	 EOF 
;

// Rule FDEnumType
ruleFDEnumType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDEnumTypeAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDEnumTypeAccess().getEnumeratorsFDEnumeratorParserRuleCall_1_0()); 
	    }
		lv_enumerators_1_0=ruleFDEnumerator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDEnumTypeRule());
	        }
       		add(
       			$current, 
       			"enumerators",
        		lv_enumerators_1_0, 
        		"FDEnumerator");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDEnumTypeAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDEnumTypeAccess().getEnumeratorsFDEnumeratorParserRuleCall_2_1_0()); 
	    }
		lv_enumerators_3_0=ruleFDEnumerator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDEnumTypeRule());
	        }
       		add(
       			$current, 
       			"enumerators",
        		lv_enumerators_3_0, 
        		"FDEnumerator");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFDEnumTypeAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleFDEnumerator
entryRuleFDEnumerator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDEnumeratorRule()); }
	 iv_ruleFDEnumerator=ruleFDEnumerator 
	 { $current=$iv_ruleFDEnumerator.current; } 
	 EOF 
;

// Rule FDEnumerator
ruleFDEnumerator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFDEnumeratorAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDEnumeratorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleFDRootElement
entryRuleFDRootElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDRootElementRule()); }
	 iv_ruleFDRootElement=ruleFDRootElement 
	 { $current=$iv_ruleFDRootElement.current; } 
	 EOF 
;

// Rule FDRootElement
ruleFDRootElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFDRootElementAccess().getFDProviderParserRuleCall_0()); 
    }
    this_FDProvider_0=ruleFDProvider
    { 
        $current = $this_FDProvider_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFDRootElementAccess().getFDTypesParserRuleCall_1()); 
    }
    this_FDTypes_1=ruleFDTypes
    { 
        $current = $this_FDTypes_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFDRootElementAccess().getFDInterfaceParserRuleCall_2()); 
    }
    this_FDInterface_2=ruleFDInterface
    { 
        $current = $this_FDInterface_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleFDProvider
entryRuleFDProvider returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDProviderRule()); }
	 iv_ruleFDProvider=ruleFDProvider 
	 { $current=$iv_ruleFDProvider.current; } 
	 EOF 
;

// Rule FDProvider
ruleFDProvider returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='define' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDProviderAccess().getDefineKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDProviderRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDProviderAccess().getSpecFDSpecificationCrossReference_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='for' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDProviderAccess().getForKeyword_2());
    }
	otherlv_3='provider' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFDProviderAccess().getProviderKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDProviderAccess().getNameFQNParserRuleCall_4_0()); 
	    }
		lv_name_4_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDProviderRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFDProviderAccess().getLeftCurlyBracketKeyword_5());
    }
(	otherlv_6='use' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFDProviderAccess().getUseKeyword_6_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDProviderRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDProviderAccess().getUseFDRootElementCrossReference_6_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getFDProviderAccess().getPropertiesFDPropertySetParserRuleCall_7_0()); 
	    }
		lv_properties_8_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDProviderRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_8_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFDProviderAccess().getInstancesFDInterfaceInstanceParserRuleCall_8_0()); 
	    }
		lv_instances_9_0=ruleFDInterfaceInstance		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDProviderRule());
	        }
       		add(
       			$current, 
       			"instances",
        		lv_instances_9_0, 
        		"FDInterfaceInstance");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getFDProviderAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleFDInterfaceInstance
entryRuleFDInterfaceInstance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDInterfaceInstanceRule()); }
	 iv_ruleFDInterfaceInstance=ruleFDInterfaceInstance 
	 { $current=$iv_ruleFDInterfaceInstance.current; } 
	 EOF 
;

// Rule FDInterfaceInstance
ruleFDInterfaceInstance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='instance' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDInterfaceInstanceAccess().getInstanceKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDInterfaceInstanceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDInterfaceInstanceAccess().getTargetFInterfaceCrossReference_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDInterfaceInstanceAccess().getAsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDInterfaceInstanceAccess().getNameFQNParserRuleCall_2_1_0()); 
	    }
		lv_name_3_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDInterfaceInstanceRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFDInterfaceInstanceAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDInterfaceInstanceAccess().getPropertiesFDPropertySetParserRuleCall_4_0()); 
	    }
		lv_properties_5_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDInterfaceInstanceRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_5_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFDInterfaceInstanceAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleFDTypes
entryRuleFDTypes returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDTypesRule()); }
	 iv_ruleFDTypes=ruleFDTypes 
	 { $current=$iv_ruleFDTypes.current; } 
	 EOF 
;

// Rule FDTypes
ruleFDTypes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='define' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDTypesAccess().getDefineKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDTypesRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDTypesAccess().getSpecFDSpecificationCrossReference_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='for' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDTypesAccess().getForKeyword_2());
    }
	otherlv_3='typeCollection' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFDTypesAccess().getTypeCollectionKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDTypesRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDTypesAccess().getTargetFTypeCollectionCrossReference_4_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='as' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFDTypesAccess().getAsKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDTypesAccess().getNameFQNParserRuleCall_5_1_0()); 
	    }
		lv_name_6_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDTypesRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFDTypesAccess().getLeftCurlyBracketKeyword_6());
    }
(	otherlv_8='use' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFDTypesAccess().getUseKeyword_7_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDTypesRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDTypesAccess().getUseFDRootElementCrossReference_7_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getFDTypesAccess().getPropertiesFDPropertySetParserRuleCall_8_0()); 
	    }
		lv_properties_10_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDTypesRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_10_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFDTypesAccess().getTypesFDTypeDefinitionParserRuleCall_9_0()); 
	    }
		lv_types_11_0=ruleFDTypeDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDTypesRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_11_0, 
        		"FDTypeDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getFDTypesAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleFDInterface
entryRuleFDInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDInterfaceRule()); }
	 iv_ruleFDInterface=ruleFDInterface 
	 { $current=$iv_ruleFDInterface.current; } 
	 EOF 
;

// Rule FDInterface
ruleFDInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='define' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDInterfaceAccess().getDefineKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDInterfaceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDInterfaceAccess().getSpecFDSpecificationCrossReference_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='for' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDInterfaceAccess().getForKeyword_2());
    }
	otherlv_3='interface' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFDInterfaceAccess().getInterfaceKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDInterfaceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDInterfaceAccess().getTargetFInterfaceCrossReference_4_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='as' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFDInterfaceAccess().getAsKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDInterfaceAccess().getNameFQNParserRuleCall_5_1_0()); 
	    }
		lv_name_6_0=ruleFQN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDInterfaceRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_6_0, 
        		"FQN");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFDInterfaceAccess().getLeftCurlyBracketKeyword_6());
    }
(	otherlv_8='use' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFDInterfaceAccess().getUseKeyword_7_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDInterfaceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDInterfaceAccess().getUseFDRootElementCrossReference_7_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))*(
(
		{ 
	        newCompositeNode(grammarAccess.getFDInterfaceAccess().getPropertiesFDPropertySetParserRuleCall_8_0()); 
	    }
		lv_properties_10_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDInterfaceRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_10_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFDInterfaceAccess().getAttributesFDAttributeParserRuleCall_9_0_0()); 
	    }
		lv_attributes_11_0=ruleFDAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDInterfaceRule());
	        }
       		add(
       			$current, 
       			"attributes",
        		lv_attributes_11_0, 
        		"FDAttribute");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFDInterfaceAccess().getMethodsFDMethodParserRuleCall_9_1_0()); 
	    }
		lv_methods_12_0=ruleFDMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDInterfaceRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_12_0, 
        		"FDMethod");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFDInterfaceAccess().getBroadcastsFDBroadcastParserRuleCall_9_2_0()); 
	    }
		lv_broadcasts_13_0=ruleFDBroadcast		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDInterfaceRule());
	        }
       		add(
       			$current, 
       			"broadcasts",
        		lv_broadcasts_13_0, 
        		"FDBroadcast");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFDInterfaceAccess().getTypesFDTypeDefinitionParserRuleCall_9_3_0()); 
	    }
		lv_types_14_0=ruleFDTypeDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDInterfaceRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_14_0, 
        		"FDTypeDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getFDInterfaceAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleFDAttribute
entryRuleFDAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDAttributeRule()); }
	 iv_ruleFDAttribute=ruleFDAttribute 
	 { $current=$iv_ruleFDAttribute.current; } 
	 EOF 
;

// Rule FDAttribute
ruleFDAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='attribute' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDAttributeAccess().getAttributeKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDAttributeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDAttributeAccess().getTargetFAttributeCrossReference_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDAttributeAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDAttributeAccess().getPropertiesFDPropertySetParserRuleCall_3_0()); 
	    }
		lv_properties_3_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDAttributeRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_3_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFDAttributeAccess().getOverwritesFDTypeOverwritesParserRuleCall_4_0()); 
	    }
		lv_overwrites_4_0=ruleFDTypeOverwrites		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDAttributeRule());
	        }
       		set(
       			$current, 
       			"overwrites",
        		lv_overwrites_4_0, 
        		"FDTypeOverwrites");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFDAttributeAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleFDOperation
entryRuleFDOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDOperationRule()); }
	 iv_ruleFDOperation=ruleFDOperation 
	 { $current=$iv_ruleFDOperation.current; } 
	 EOF 
;

// Rule FDOperation
ruleFDOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFDOperationAccess().getFDMethodParserRuleCall_0()); 
    }
    this_FDMethod_0=ruleFDMethod
    { 
        $current = $this_FDMethod_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFDOperationAccess().getFDBroadcastParserRuleCall_1()); 
    }
    this_FDBroadcast_1=ruleFDBroadcast
    { 
        $current = $this_FDBroadcast_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFDMethod
entryRuleFDMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDMethodRule()); }
	 iv_ruleFDMethod=ruleFDMethod 
	 { $current=$iv_ruleFDMethod.current; } 
	 EOF 
;

// Rule FDMethod
ruleFDMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='method' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDMethodAccess().getMethodKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDMethodRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDMethodAccess().getTargetFMethodCrossReference_1_0()); 
	    }
		ruleFQN_WITH_SELECTOR		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDMethodAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDMethodAccess().getPropertiesFDPropertySetParserRuleCall_3_0()); 
	    }
		lv_properties_3_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDMethodRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_3_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='in' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFDMethodAccess().getInKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDMethodAccess().getInArgumentsFDArgumentListParserRuleCall_4_1_0()); 
	    }
		lv_inArguments_5_0=ruleFDArgumentList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDMethodRule());
	        }
       		set(
       			$current, 
       			"inArguments",
        		lv_inArguments_5_0, 
        		"FDArgumentList");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='out' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFDMethodAccess().getOutKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDMethodAccess().getOutArgumentsFDArgumentListParserRuleCall_5_1_0()); 
	    }
		lv_outArguments_7_0=ruleFDArgumentList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDMethodRule());
	        }
       		set(
       			$current, 
       			"outArguments",
        		lv_outArguments_7_0, 
        		"FDArgumentList");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFDMethodAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleFDBroadcast
entryRuleFDBroadcast returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDBroadcastRule()); }
	 iv_ruleFDBroadcast=ruleFDBroadcast 
	 { $current=$iv_ruleFDBroadcast.current; } 
	 EOF 
;

// Rule FDBroadcast
ruleFDBroadcast returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='broadcast' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDBroadcastAccess().getBroadcastKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDBroadcastRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDBroadcastAccess().getTargetFBroadcastCrossReference_1_0()); 
	    }
		ruleFQN_WITH_SELECTOR		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDBroadcastAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDBroadcastAccess().getPropertiesFDPropertySetParserRuleCall_3_0()); 
	    }
		lv_properties_3_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDBroadcastRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_3_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='out' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFDBroadcastAccess().getOutKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDBroadcastAccess().getOutArgumentsFDArgumentListParserRuleCall_4_1_0()); 
	    }
		lv_outArguments_5_0=ruleFDArgumentList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDBroadcastRule());
	        }
       		set(
       			$current, 
       			"outArguments",
        		lv_outArguments_5_0, 
        		"FDArgumentList");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFDBroadcastAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleFDArgumentList
entryRuleFDArgumentList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDArgumentListRule()); }
	 iv_ruleFDArgumentList=ruleFDArgumentList 
	 { $current=$iv_ruleFDArgumentList.current; } 
	 EOF 
;

// Rule FDArgumentList
ruleFDArgumentList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFDArgumentListAccess().getFDArgumentListAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFDArgumentListAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDArgumentListAccess().getArgumentsFDArgumentParserRuleCall_2_0()); 
	    }
		lv_arguments_2_0=ruleFDArgument		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDArgumentListRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"FDArgument");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFDArgumentListAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleFDArgument
entryRuleFDArgument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDArgumentRule()); }
	 iv_ruleFDArgument=ruleFDArgument 
	 { $current=$iv_ruleFDArgument.current; } 
	 EOF 
;

// Rule FDArgument
ruleFDArgument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDArgumentRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDArgumentAccess().getTargetFArgumentCrossReference_0_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFDArgumentAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDArgumentAccess().getPropertiesFDPropertySetParserRuleCall_2_0()); 
	    }
		lv_properties_2_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDArgumentRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_2_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFDArgumentAccess().getOverwritesFDTypeOverwritesParserRuleCall_3_0()); 
	    }
		lv_overwrites_3_0=ruleFDTypeOverwrites		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDArgumentRule());
	        }
       		set(
       			$current, 
       			"overwrites",
        		lv_overwrites_3_0, 
        		"FDTypeOverwrites");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFDArgumentAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFDTypeDefinition
entryRuleFDTypeDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDTypeDefinitionRule()); }
	 iv_ruleFDTypeDefinition=ruleFDTypeDefinition 
	 { $current=$iv_ruleFDTypeDefinition.current; } 
	 EOF 
;

// Rule FDTypeDefinition
ruleFDTypeDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFDTypeDefinitionAccess().getFDArrayParserRuleCall_0()); 
    }
    this_FDArray_0=ruleFDArray
    { 
        $current = $this_FDArray_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFDTypeDefinitionAccess().getFDCompoundParserRuleCall_1()); 
    }
    this_FDCompound_1=ruleFDCompound
    { 
        $current = $this_FDCompound_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFDTypeDefinitionAccess().getFDEnumerationParserRuleCall_2()); 
    }
    this_FDEnumeration_2=ruleFDEnumeration
    { 
        $current = $this_FDEnumeration_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFDTypeDefinitionAccess().getFDTypedefParserRuleCall_3()); 
    }
    this_FDTypedef_3=ruleFDTypedef
    { 
        $current = $this_FDTypedef_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFDCompound
entryRuleFDCompound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDCompoundRule()); }
	 iv_ruleFDCompound=ruleFDCompound 
	 { $current=$iv_ruleFDCompound.current; } 
	 EOF 
;

// Rule FDCompound
ruleFDCompound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFDCompoundAccess().getFDStructParserRuleCall_0()); 
    }
    this_FDStruct_0=ruleFDStruct
    { 
        $current = $this_FDStruct_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFDCompoundAccess().getFDUnionParserRuleCall_1()); 
    }
    this_FDUnion_1=ruleFDUnion
    { 
        $current = $this_FDUnion_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFDArray
entryRuleFDArray returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDArrayRule()); }
	 iv_ruleFDArray=ruleFDArray 
	 { $current=$iv_ruleFDArray.current; } 
	 EOF 
;

// Rule FDArray
ruleFDArray returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='array' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDArrayAccess().getArrayKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDArrayRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDArrayAccess().getTargetFArrayTypeCrossReference_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDArrayAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDArrayAccess().getPropertiesFDPropertySetParserRuleCall_3_0()); 
	    }
		lv_properties_3_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDArrayRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_3_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFDArrayAccess().getOverwritesFDTypeOverwritesParserRuleCall_4_0()); 
	    }
		lv_overwrites_4_0=ruleFDTypeOverwrites		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDArrayRule());
	        }
       		set(
       			$current, 
       			"overwrites",
        		lv_overwrites_4_0, 
        		"FDTypeOverwrites");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFDArrayAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleFDStruct
entryRuleFDStruct returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDStructRule()); }
	 iv_ruleFDStruct=ruleFDStruct 
	 { $current=$iv_ruleFDStruct.current; } 
	 EOF 
;

// Rule FDStruct
ruleFDStruct returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='struct' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDStructAccess().getStructKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDStructRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDStructAccess().getTargetFStructTypeCrossReference_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDStructAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDStructAccess().getPropertiesFDPropertySetParserRuleCall_3_0()); 
	    }
		lv_properties_3_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDStructRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_3_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFDStructAccess().getFieldsFDFieldParserRuleCall_4_0()); 
	    }
		lv_fields_4_0=ruleFDField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDStructRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_4_0, 
        		"FDField");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFDStructAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleFDUnion
entryRuleFDUnion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDUnionRule()); }
	 iv_ruleFDUnion=ruleFDUnion 
	 { $current=$iv_ruleFDUnion.current; } 
	 EOF 
;

// Rule FDUnion
ruleFDUnion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='union' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDUnionAccess().getUnionKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDUnionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDUnionAccess().getTargetFUnionTypeCrossReference_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDUnionAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDUnionAccess().getPropertiesFDPropertySetParserRuleCall_3_0()); 
	    }
		lv_properties_3_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDUnionRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_3_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFDUnionAccess().getFieldsFDFieldParserRuleCall_4_0()); 
	    }
		lv_fields_4_0=ruleFDField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDUnionRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_4_0, 
        		"FDField");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFDUnionAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleFDTypedef
entryRuleFDTypedef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDTypedefRule()); }
	 iv_ruleFDTypedef=ruleFDTypedef 
	 { $current=$iv_ruleFDTypedef.current; } 
	 EOF 
;

// Rule FDTypedef
ruleFDTypedef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='typedef' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDTypedefAccess().getTypedefKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDTypedefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDTypedefAccess().getTargetFTypeDefCrossReference_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDTypedefAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDTypedefAccess().getPropertiesFDPropertySetParserRuleCall_3_0()); 
	    }
		lv_properties_3_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDTypedefRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_3_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFDTypedefAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFDField
entryRuleFDField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDFieldRule()); }
	 iv_ruleFDField=ruleFDField 
	 { $current=$iv_ruleFDField.current; } 
	 EOF 
;

// Rule FDField
ruleFDField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDFieldRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDFieldAccess().getTargetFFieldCrossReference_0_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFDFieldAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDFieldAccess().getPropertiesFDPropertySetParserRuleCall_2_0()); 
	    }
		lv_properties_2_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDFieldRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_2_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFDFieldAccess().getOverwritesFDTypeOverwritesParserRuleCall_3_0()); 
	    }
		lv_overwrites_3_0=ruleFDTypeOverwrites		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDFieldRule());
	        }
       		set(
       			$current, 
       			"overwrites",
        		lv_overwrites_3_0, 
        		"FDTypeOverwrites");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFDFieldAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFDEnumeration
entryRuleFDEnumeration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDEnumerationRule()); }
	 iv_ruleFDEnumeration=ruleFDEnumeration 
	 { $current=$iv_ruleFDEnumeration.current; } 
	 EOF 
;

// Rule FDEnumeration
ruleFDEnumeration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enumeration' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDEnumerationAccess().getEnumerationKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDEnumerationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDEnumerationAccess().getTargetFEnumerationTypeCrossReference_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDEnumerationAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDEnumerationAccess().getPropertiesFDPropertySetParserRuleCall_3_0()); 
	    }
		lv_properties_3_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDEnumerationRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_3_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFDEnumerationAccess().getEnumeratorsFDEnumValueParserRuleCall_4_0()); 
	    }
		lv_enumerators_4_0=ruleFDEnumValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDEnumerationRule());
	        }
       		add(
       			$current, 
       			"enumerators",
        		lv_enumerators_4_0, 
        		"FDEnumValue");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFDEnumerationAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleFDEnumValue
entryRuleFDEnumValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDEnumValueRule()); }
	 iv_ruleFDEnumValue=ruleFDEnumValue 
	 { $current=$iv_ruleFDEnumValue.current; } 
	 EOF 
;

// Rule FDEnumValue
ruleFDEnumValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDEnumValueRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDEnumValueAccess().getTargetFEnumeratorCrossReference_0_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFDEnumValueAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDEnumValueAccess().getPropertiesFDPropertySetParserRuleCall_2_0()); 
	    }
		lv_properties_2_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDEnumValueRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_2_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFDEnumValueAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleFDTypeOverwrites
entryRuleFDTypeOverwrites returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDTypeOverwritesRule()); }
	 iv_ruleFDTypeOverwrites=ruleFDTypeOverwrites 
	 { $current=$iv_ruleFDTypeOverwrites.current; } 
	 EOF 
;

// Rule FDTypeOverwrites
ruleFDTypeOverwrites returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='#' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDTypeOverwritesAccess().getNumberSignKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getFDTypeOverwritesAccess().getFDPlainTypeOverwritesParserRuleCall_0_1()); 
    }
    this_FDPlainTypeOverwrites_1=ruleFDPlainTypeOverwrites
    { 
        $current = $this_FDPlainTypeOverwrites_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_2='#struct' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDTypeOverwritesAccess().getStructKeyword_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getFDTypeOverwritesAccess().getFDStructOverwritesParserRuleCall_1_1()); 
    }
    this_FDStructOverwrites_3=ruleFDStructOverwrites
    { 
        $current = $this_FDStructOverwrites_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_4='#union' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFDTypeOverwritesAccess().getUnionKeyword_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getFDTypeOverwritesAccess().getFDUnionOverwritesParserRuleCall_2_1()); 
    }
    this_FDUnionOverwrites_5=ruleFDUnionOverwrites
    { 
        $current = $this_FDUnionOverwrites_5.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(	otherlv_6='#enumeration' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFDTypeOverwritesAccess().getEnumerationKeyword_3_0());
    }

    { 
        newCompositeNode(grammarAccess.getFDTypeOverwritesAccess().getFDEnumerationOverwritesParserRuleCall_3_1()); 
    }
    this_FDEnumerationOverwrites_7=ruleFDEnumerationOverwrites
    { 
        $current = $this_FDEnumerationOverwrites_7.current; 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleFDPlainTypeOverwrites
entryRuleFDPlainTypeOverwrites returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDPlainTypeOverwritesRule()); }
	 iv_ruleFDPlainTypeOverwrites=ruleFDPlainTypeOverwrites 
	 { $current=$iv_ruleFDPlainTypeOverwrites.current; } 
	 EOF 
;

// Rule FDPlainTypeOverwrites
ruleFDPlainTypeOverwrites returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFDPlainTypeOverwritesAccess().getFDPlainTypeOverwritesAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFDPlainTypeOverwritesAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDPlainTypeOverwritesAccess().getPropertiesFDPropertySetParserRuleCall_2_0()); 
	    }
		lv_properties_2_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDPlainTypeOverwritesRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_2_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFDPlainTypeOverwritesAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleFDStructOverwrites
entryRuleFDStructOverwrites returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDStructOverwritesRule()); }
	 iv_ruleFDStructOverwrites=ruleFDStructOverwrites 
	 { $current=$iv_ruleFDStructOverwrites.current; } 
	 EOF 
;

// Rule FDStructOverwrites
ruleFDStructOverwrites returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDStructOverwritesAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDStructOverwritesAccess().getPropertiesFDPropertySetParserRuleCall_1_0()); 
	    }
		lv_properties_1_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDStructOverwritesRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_1_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFDStructOverwritesAccess().getFieldsFDFieldParserRuleCall_2_0()); 
	    }
		lv_fields_2_0=ruleFDField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDStructOverwritesRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_2_0, 
        		"FDField");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFDStructOverwritesAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleFDUnionOverwrites
entryRuleFDUnionOverwrites returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDUnionOverwritesRule()); }
	 iv_ruleFDUnionOverwrites=ruleFDUnionOverwrites 
	 { $current=$iv_ruleFDUnionOverwrites.current; } 
	 EOF 
;

// Rule FDUnionOverwrites
ruleFDUnionOverwrites returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDUnionOverwritesAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDUnionOverwritesAccess().getPropertiesFDPropertySetParserRuleCall_1_0()); 
	    }
		lv_properties_1_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDUnionOverwritesRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_1_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFDUnionOverwritesAccess().getFieldsFDFieldParserRuleCall_2_0()); 
	    }
		lv_fields_2_0=ruleFDField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDUnionOverwritesRule());
	        }
       		add(
       			$current, 
       			"fields",
        		lv_fields_2_0, 
        		"FDField");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFDUnionOverwritesAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleFDEnumerationOverwrites
entryRuleFDEnumerationOverwrites returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDEnumerationOverwritesRule()); }
	 iv_ruleFDEnumerationOverwrites=ruleFDEnumerationOverwrites 
	 { $current=$iv_ruleFDEnumerationOverwrites.current; } 
	 EOF 
;

// Rule FDEnumerationOverwrites
ruleFDEnumerationOverwrites returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFDEnumerationOverwritesAccess().getFDEnumerationOverwritesAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFDEnumerationOverwritesAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDEnumerationOverwritesAccess().getPropertiesFDPropertySetParserRuleCall_2_0()); 
	    }
		lv_properties_2_0=ruleFDPropertySet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDEnumerationOverwritesRule());
	        }
       		set(
       			$current, 
       			"properties",
        		lv_properties_2_0, 
        		"FDPropertySet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFDEnumerationOverwritesAccess().getEnumeratorsFDEnumValueParserRuleCall_3_0()); 
	    }
		lv_enumerators_3_0=ruleFDEnumValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDEnumerationOverwritesRule());
	        }
       		add(
       			$current, 
       			"enumerators",
        		lv_enumerators_3_0, 
        		"FDEnumValue");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFDEnumerationOverwritesAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleFDPropertySet
entryRuleFDPropertySet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDPropertySetRule()); }
	 iv_ruleFDPropertySet=ruleFDPropertySet 
	 { $current=$iv_ruleFDPropertySet.current; } 
	 EOF 
;

// Rule FDPropertySet
ruleFDPropertySet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getFDPropertySetAccess().getFDPropertySetAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFDPropertySetAccess().getItemsFDPropertyParserRuleCall_1_0_0()); 
	    }
		lv_items_1_0=ruleFDProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDPropertySetRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_1_0, 
        		"FDProperty");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDPropertySetAccess().getCommaKeyword_1_1_0());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFDPropertySetAccess().getItemsFDPropertyParserRuleCall_1_1_1_0()); 
	    }
		lv_items_3_0=ruleFDProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDPropertySetRule());
	        }
       		add(
       			$current, 
       			"items",
        		lv_items_3_0, 
        		"FDProperty");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?)
;





// Entry rule entryRuleFDProperty
entryRuleFDProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDPropertyRule()); }
	 iv_ruleFDProperty=ruleFDProperty 
	 { $current=$iv_ruleFDProperty.current; } 
	 EOF 
;

// Rule FDProperty
ruleFDProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDPropertyRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFDPropertyAccess().getDeclFDPropertyDeclCrossReference_0_0()); 
	}

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFDPropertyAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDPropertyAccess().getValueFDComplexValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleFDComplexValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDPropertyRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"FDComplexValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFDComplexValue
entryRuleFDComplexValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDComplexValueRule()); }
	 iv_ruleFDComplexValue=ruleFDComplexValue 
	 { $current=$iv_ruleFDComplexValue.current; } 
	 EOF 
;

// Rule FDComplexValue
ruleFDComplexValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFDComplexValueAccess().getSingleFDValueParserRuleCall_0_0()); 
	    }
		lv_single_0_0=ruleFDValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDComplexValueRule());
	        }
       		set(
       			$current, 
       			"single",
        		lv_single_0_0, 
        		"FDValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFDComplexValueAccess().getArrayFDValueArrayParserRuleCall_1_0()); 
	    }
		lv_array_1_0=ruleFDValueArray		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDComplexValueRule());
	        }
       		set(
       			$current, 
       			"array",
        		lv_array_1_0, 
        		"FDValueArray");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFDValueArray
entryRuleFDValueArray returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDValueArrayRule()); }
	 iv_ruleFDValueArray=ruleFDValueArray 
	 { $current=$iv_ruleFDValueArray.current; } 
	 EOF 
;

// Rule FDValueArray
ruleFDValueArray returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDValueArrayAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDValueArrayAccess().getValuesFDValueParserRuleCall_1_0()); 
	    }
		lv_values_1_0=ruleFDValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDValueArrayRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_1_0, 
        		"FDValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFDValueArrayAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFDValueArrayAccess().getValuesFDValueParserRuleCall_2_1_0()); 
	    }
		lv_values_3_0=ruleFDValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFDValueArrayRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"FDValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFDValueArrayAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleFDValue
entryRuleFDValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDValueRule()); }
	 iv_ruleFDValue=ruleFDValue 
	 { $current=$iv_ruleFDValue.current; } 
	 EOF 
;

// Rule FDValue
ruleFDValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFDValueAccess().getFDIntegerParserRuleCall_0()); 
    }
    this_FDInteger_0=ruleFDInteger
    { 
        $current = $this_FDInteger_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFDValueAccess().getFDStringParserRuleCall_1()); 
    }
    this_FDString_1=ruleFDString
    { 
        $current = $this_FDString_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFDValueAccess().getFDBooleanParserRuleCall_2()); 
    }
    this_FDBoolean_2=ruleFDBoolean
    { 
        $current = $this_FDBoolean_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFDValueAccess().getFDInterfaceRefParserRuleCall_3()); 
    }
    this_FDInterfaceRef_3=ruleFDInterfaceRef
    { 
        $current = $this_FDInterfaceRef_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFDValueAccess().getFDGenericParserRuleCall_4()); 
    }
    this_FDGeneric_4=ruleFDGeneric
    { 
        $current = $this_FDGeneric_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleFDInteger
entryRuleFDInteger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDIntegerRule()); }
	 iv_ruleFDInteger=ruleFDInteger 
	 { $current=$iv_ruleFDInteger.current; } 
	 EOF 
;

// Rule FDInteger
ruleFDInteger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_INT
		{
			newLeafNode(lv_value_0_0, grammarAccess.getFDIntegerAccess().getValueINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDIntegerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"INT");
	    }

)
)
;





// Entry rule entryRuleFDString
entryRuleFDString returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDStringRule()); }
	 iv_ruleFDString=ruleFDString 
	 { $current=$iv_ruleFDString.current; } 
	 EOF 
;

// Rule FDString
ruleFDString returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getFDStringAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDStringRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleFDBoolean
entryRuleFDBoolean returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDBooleanRule()); }
	 iv_ruleFDBoolean=ruleFDBoolean 
	 { $current=$iv_ruleFDBoolean.current; } 
	 EOF 
;

// Rule FDBoolean
ruleFDBoolean returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_value_0_1=	'false' 
    {
        newLeafNode(lv_value_0_1, grammarAccess.getFDBooleanAccess().getValueFalseKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDBooleanRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_1, null);
	    }

    |		lv_value_0_2=	'true' 
    {
        newLeafNode(lv_value_0_2, grammarAccess.getFDBooleanAccess().getValueTrueKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDBooleanRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_2, null);
	    }

)

)
)
;





// Entry rule entryRuleFDInterfaceRef
entryRuleFDInterfaceRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDInterfaceRefRule()); }
	 iv_ruleFDInterfaceRef=ruleFDInterfaceRef 
	 { $current=$iv_ruleFDInterfaceRef.current; } 
	 EOF 
;

// Rule FDInterfaceRef
ruleFDInterfaceRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='&' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFDInterfaceRefAccess().getAmpersandKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDInterfaceRefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDInterfaceRefAccess().getValueFInterfaceCrossReference_1_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFDGeneric
entryRuleFDGeneric returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFDGenericRule()); }
	 iv_ruleFDGeneric=ruleFDGeneric 
	 { $current=$iv_ruleFDGeneric.current; } 
	 EOF 
;

// Rule FDGeneric
ruleFDGeneric returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFDGenericRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getFDGenericAccess().getValueEObjectCrossReference_0()); 
	    }
		ruleFQN		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQNRule()); } 
	 iv_ruleFQN=ruleFQN 
	 { $current=$iv_ruleFQN.current.getText(); }  
	 EOF 
;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFQNAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQNAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQNAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleFQN_WITH_SELECTOR
entryRuleFQN_WITH_SELECTOR returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFQN_WITH_SELECTORRule()); } 
	 iv_ruleFQN_WITH_SELECTOR=ruleFQN_WITH_SELECTOR 
	 { $current=$iv_ruleFQN_WITH_SELECTOR.current.getText(); }  
	 EOF 
;

// Rule FQN_WITH_SELECTOR
ruleFQN_WITH_SELECTOR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFQN_WITH_SELECTORAccess().getFQNParserRuleCall_0()); 
    }
    this_FQN_0=ruleFQN    {
		$current.merge(this_FQN_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFQN_WITH_SELECTORAccess().getColonKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFQN_WITH_SELECTORAccess().getIDTerminalRuleCall_1_1()); 
    }
)?)
    ;





// Rule FDPropertyHost
ruleFDPropertyHost returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='providers' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getProvidersEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFDPropertyHostAccess().getProvidersEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='instances' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getInstancesEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFDPropertyHostAccess().getInstancesEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='type_collections' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getType_collectionsEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFDPropertyHostAccess().getType_collectionsEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='interfaces' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getInterfacesEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFDPropertyHostAccess().getInterfacesEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='attributes' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getAttributesEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getFDPropertyHostAccess().getAttributesEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='methods' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getMethodsEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getFDPropertyHostAccess().getMethodsEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='broadcasts' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getBroadcastsEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getFDPropertyHostAccess().getBroadcastsEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='arguments' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getArgumentsEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getFDPropertyHostAccess().getArgumentsEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='struct_fields' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getStruct_fieldsEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getFDPropertyHostAccess().getStruct_fieldsEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='union_fields' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getUnion_fieldsEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getFDPropertyHostAccess().getUnion_fieldsEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='arrays' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getArraysEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getFDPropertyHostAccess().getArraysEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='structs' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getStructsEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getFDPropertyHostAccess().getStructsEnumLiteralDeclaration_11()); 
    }
)
    |(	enumLiteral_12='unions' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getUnionsEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getFDPropertyHostAccess().getUnionsEnumLiteralDeclaration_12()); 
    }
)
    |(	enumLiteral_13='enumerations' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getEnumerationsEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_13, grammarAccess.getFDPropertyHostAccess().getEnumerationsEnumLiteralDeclaration_13()); 
    }
)
    |(	enumLiteral_14='enumerators' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getEnumeratorsEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_14, grammarAccess.getFDPropertyHostAccess().getEnumeratorsEnumLiteralDeclaration_14()); 
    }
)
    |(	enumLiteral_15='typedefs' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getTypedefsEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_15, grammarAccess.getFDPropertyHostAccess().getTypedefsEnumLiteralDeclaration_15()); 
    }
)
    |(	enumLiteral_16='strings' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getStringsEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_16, grammarAccess.getFDPropertyHostAccess().getStringsEnumLiteralDeclaration_16()); 
    }
)
    |(	enumLiteral_17='numbers' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getNumbersEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_17, grammarAccess.getFDPropertyHostAccess().getNumbersEnumLiteralDeclaration_17()); 
    }
)
    |(	enumLiteral_18='integers' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getIntegersEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_18, grammarAccess.getFDPropertyHostAccess().getIntegersEnumLiteralDeclaration_18()); 
    }
)
    |(	enumLiteral_19='floats' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getFloatsEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_19, grammarAccess.getFDPropertyHostAccess().getFloatsEnumLiteralDeclaration_19()); 
    }
)
    |(	enumLiteral_20='booleans' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getBooleansEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_20, grammarAccess.getFDPropertyHostAccess().getBooleansEnumLiteralDeclaration_20()); 
    }
)
    |(	enumLiteral_21='byte_buffers' 
	{
        $current = grammarAccess.getFDPropertyHostAccess().getByte_buffersEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_21, grammarAccess.getFDPropertyHostAccess().getByte_buffersEnumLiteralDeclaration_21()); 
    }
));



// Rule FDPredefinedTypeId
ruleFDPredefinedTypeId returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Integer' 
	{
        $current = grammarAccess.getFDPredefinedTypeIdAccess().getIntegerEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getFDPredefinedTypeIdAccess().getIntegerEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='String' 
	{
        $current = grammarAccess.getFDPredefinedTypeIdAccess().getStringEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getFDPredefinedTypeIdAccess().getStringEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Boolean' 
	{
        $current = grammarAccess.getFDPredefinedTypeIdAccess().getBooleanEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getFDPredefinedTypeIdAccess().getBooleanEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Interface' 
	{
        $current = grammarAccess.getFDPredefinedTypeIdAccess().getInterfaceEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getFDPredefinedTypeIdAccess().getInterfaceEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='Instance' 
	{
        $current = grammarAccess.getFDPredefinedTypeIdAccess().getInstanceEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getFDPredefinedTypeIdAccess().getInstanceEnumLiteralDeclaration_4()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


