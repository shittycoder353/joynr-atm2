/*
 * #%L
 * %%
 * Copyright (C) 2011 - 2017 BMW Car IT GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package vehicle

import types.Localisation.* from "LocalisationTypes.fidl"

interface NavigationPrimitive {

	version {major 0 minor 1}

	method requestGuidance {
		in {
			GpsLocation location
		}
		out {
			Boolean result
		}
	}
}
<**
	@description: The <code>Navigation</code> interface describes access to
		the navigation system inside the car. The navigation system stores a
		list of <code>Trip</code>s. A trip could be activated and used
		for guidance.
	@see: Trip
**>
interface Navigation{

	version {major 0 minor 1}

	<**
		@description: Indicates if there is a active trip that is currently
			used for guidance.
	**>
	attribute Boolean guidanceActive readonly // NOTIFYREADONLY
	<**
		@description: The currently active used for guidance, or null if there
			is no active trip.
	**>
	attribute Trip guidedTrip readonly // NOTIFYREADONLY
	<**
		@description: The status of the active trip currently used for guidance.
	**>
	attribute Trip[] trips // NOTIFYREADWRITE

	<** @description: Adds a new trip to the CIC. **>
	method addTrip {
		in {
			<** @description: the trip to add. **>
			Trip trip
		}
	}

	<**
		@description: Updates a trip in the CIC. Note: the local trip ID might
			change.
	**>
	method updateTrip {
		in {
			<** @description: the trip to update **>
			Trip trip
		}
	}

	<** @description: Deletes the trip with the specified trip ID. **>
	method deleteTrip {
		in {
			<** @description: the trip to delete. **>
			String tripId
		}
	}


	<**
		@description: Deletes all trips at the server.
	**>
	method deleteAll {}

	<**
		@description: Get the current list of saved Trips
	**>
	method getSavedTrips {
		out {
			Trip[] result
		}
	}

	<**
		@description: Request the guidance for the submitted trip
	**>
	method requestGuidance {
		in {
			<** @description: the trip which shall be guided **>
			Trip trip
		}

		out {
			<**
				@description: true if the request has been performed successfully
			**>
			Boolean result
		}
	}

	<**
		@description: Stops the current guidance (if exists)
	**>
	method stopGuidance {
		out {
			<**
				@description: true if the request has been performed successfully
			**>
			Boolean result
		}
	}

	broadcast locationUpdate {
		out {
			GpsLocation location
		}
	}

	broadcast locationUpdateWithSpeed {
		out {
			GpsLocation location
			Float currentSpeed
		}
	}

	<**
		@description: Selective broadcast with one output parameter
		@param: country Only update location when in this country
		@param: startTime Start update at this time
		@param: endTime End update at this time
	**>
	broadcast locationUpdateSelective selective {
		out {
			GpsLocation location
		}
	}

	<**
		@description: Selective broadcast with multiple output parameters
		@param: country Only update location when in this country
		@param: startTime Start update at this time
		@param: endTime End update at this time
	**>
	broadcast locationUpdateWithSpeedSelective selective {
		out {
			GpsLocation location
			Float currentSpeed
		}
	}

}
