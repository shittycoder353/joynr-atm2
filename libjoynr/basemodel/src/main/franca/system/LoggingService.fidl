/*
 * #%L
 * %%
 * Copyright (C) 2011 - 2017 BMW Car IT GmbH
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
package system

typeCollection {
	
	<** @description: The log level **>
	enumeration JoynrLogLevel {
		<** @description: No logging **>
		OFF
		<** @description: Logging level for fatal errors **>
		FATAL
		<** @description: Logging level for generic errors **>
		ERROR
		<** @description: Logging level for warnings **>
		WARN
		<** @description: Logging level for informations **>
		INFO
		<** @description: Logging level for debugging info **>
		DEBUG
		<** @description: Logging level for tracing info **>
		TRACE
	}

	<** @description: The classification of the exception **>
	struct JoynrLoggedError {
		<** @description: The classification of the exception **>
		String exceptionClass
		<** @description: The message describing the exception **>
		String exceptionMessage
	}

	<** @description: Context information record for log event **>
	struct JoynrLoggingContextTag {
		<** @description: The key of a context tag entry **>
		String key
		<** @description: The value of a context tag entry **>
		String value
	}

	<** @description: Record describing a log event **>
	struct JoynrLogEvent {
		<** @description: The time the logging event happened **>
		Int64 timestamp
		<** @description: The version of the event **>
		String eventVersion
		<** @description: The host **>
		String host
		<** @description: The path **>
		String path
		<** @description: The message **>
		String message
		<** @description: The priority **>
		JoynrLogLevel priority
		<** @description: The event **>
		JoynrLoggedError errorEvent
		<** @description: List of text classifying the event **>
		JoynrLoggingContextTag[] tags
	}
}

<**
	@description : "The logging interface is implemented by log4j and
		log4javascript appenders. Do not use directly"
**>
interface Logging  {

	<**
		@description: log a number of events
	**>
	method log {
		in {
			<** @description: The list of events to be logged **>
			JoynrLogEvent[] logEvents
		}
	}
}
